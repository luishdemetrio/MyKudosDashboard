@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;


@inject IKudosListView KudosListView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@using System.Text;
@using System.Collections.Concurrent;

@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@inject IConfiguration Config

<style>
    .infinite-scroll-container {
    height: 300px;
    overflow-y: auto;
    border: 0px solid #ccc;
}

.list-item {
    padding: 10px;
    border-bottom: 0px solid #ccc;
}

.loading-indicator {
    text-align: center;
    padding: 10px;
}

    h1 {
        font-size: 5.9vw;
    }

    h2 {
        font-size: 3.0vh;
    }

    h4 {
        font-size: 3.0vh;
    }

    h5 {
        font-size: 3.0vh;
    }

    p {
        font-size: 2vmin;
    }

</style>
<div 
     style="z-index: auto ;height:76vh;overflow-y:scroll;width:100%;overflow:auto"
     class="infinite-scroll-container" @ref="scrollContainer">


    <div class="list-item" >        

        @foreach (var item in _kudosList.Values.OrderByDescending(k => k.SendOn))
        {

            <Kudos  KudosItem=@item 
                    User=@User 
                    SendLikeCallBack=@SendLikesCallBack 
                    SendUndoLikeCallBack=@SendUndoLikesCallBack 
                    ReplyCallBack=@ReplyKudos 
                    UpdateKudosSentCallBack=@SaveKudos
                    DeleteKudosSentCallBack=@DeleteKudos 
                    CanEditOrDeleteKudosInDays = "@CanEditKudosInDays"/>
            
        }

        <FluentDialog @ref="_confirmKudosDeleteDialog" Hidden=@_hidden style="--dialog-width: 30vw;--dialog-height:30vh">
            <div style="margin:10px;vertical-align:central;height:100%">
                <h3>@Localizer["ConfirmDelete"]</h3>
                <p class="small60">@Localizer["ThisActionWillDeleteKudos"]</p>
                <p class="small60">@Localizer["KudosCommentsAndLikesWillBeDeleted"]</p>
                <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="CancelDeleteOnClick">@Localizer["Cancel"]</FluentButton>
                <FluentButton @onclick="ConfirmDeleteOnClick">@Localizer["Confirm"]</FluentButton>
            </div>
        </FluentDialog>
    </div>

    @if (isLoading)
    {
        <div class="loading-indicator">@Localizer["LoadingMoreItems"]</div>
    }

</div>
                         
@code {



    [Parameter]
    public UserProfile User { get; set; }

    [Parameter]
    public KudosTypeTab TypeTab { get; set; }

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public LoadMoreKudosCallback MoreKudosCallback { get; set; }
    public delegate Task LoadMoreKudosCallback();

    public enum KudosTypeTab
    {
        All,
        ToMe,
        FromMe,
        ToMyDirectReports
    }

    private ConcurrentDictionary<int, KudosResponse> _kudosList;

    private int CanEditKudosInDays;

    private Dictionary<int, bool> _disabledButtons;

    private readonly object _lock = new object();


    private Dictionary<int, ElementReference> numberOfLikes = new();

    private int _pageNumber;

    private ElementReference scrollContainer;

    private bool isLoading = false;

    private string SelectedTimeZoneId { get; set; } = "America/Sao_Paulo";

    private FluentDialog? _confirmKudosDeleteDialog;
    private bool _hidden = true;

    protected override void OnInitialized()
    {
        _kudosList = new();
        _disabledButtons = new();

        _pageNumber = 0;

        CanEditKudosInDays = int.Parse(Config["CanEditOrDeleteKudosInDays"]);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _confirmKudosDeleteDialog!.Hide();

            await LoadMoreItems();
            await JSRuntime.InvokeVoidAsync("addInfiniteScrollListener", scrollContainer, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnScrollAsync()
    {
        if (!isLoading)
        {
            await LoadMoreItems();
        }
    }

    private async Task LoadMoreItems()
    {
        isLoading = true;
        StateHasChanged();

        await GetMoreKudos();

        isLoading = false;
        StateHasChanged();
    }


    public async Task LoadKudos( int pageNumber = 1)
    {

        if (_kudosList is null)
        {
            _kudosList = new();
        }

        IEnumerable<KudosResponse> kudos = null; 



        switch (TypeTab)
        {
            case KudosTypeTab.All:
                kudos = await KudosListView.GetKudos(pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.FromMe:

                kudos = await KudosListView.GetKudosFromMe(User.UserProfileId.ToString(), pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.ToMe:

                kudos = await KudosListView.GetKudosToMe(User.UserProfileId.ToString(), pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.ToMyDirectReports:

                kudos = await KudosListView.GetKudosToMyDirectReports(User.UserProfileId.ToString(), pageNumber).ConfigureAwait(true);
                break;

        }

        if (kudos is null)
            return;


        foreach (var kudo in kudos)
        {
            if (!_kudosList.ContainsKey(kudo.Id))
            {
                _kudosList.TryAdd(kudo.Id, kudo);
            }
        }

        await InvokeAsync(StateHasChanged).ConfigureAwait(true);
        await Task.Delay(300);



    }

    private void SendLikesCallBack(int pKudosId, Guid pFromPersonId)
    {
        KudosListView.SendLikeAsync(pKudosId, pFromPersonId);
    }

    private void SendUndoLikesCallBack(int pKudosId, Guid pFromPersonId)
    {
        KudosListView.SendUndoLikeAsync(pKudosId, pFromPersonId);
    }

    private void SaveKudos(KudosResponse kudos)
    {
        KudosListView.UpdateKudos(new KudosMessage(kudos.Id, kudos.Message));
    }

    private bool LikeDisabled(int kudosId)
    {
        bool disabled = false;

        if (_disabledButtons.ContainsKey(kudosId))
        {
            disabled = _disabledButtons[kudosId];
        }
        else
        {
            _disabledButtons.Add(kudosId, false);
        }


        return disabled;
    }



    private void CancelDeleteOnClick()
    {
        _confirmKudosDeleteDialog!.Hide();
        _hidden = true;

    }

    private async Task ConfirmDeleteOnClick()
    {
        bool result = await KudosListView.DeleteKudos(_kudosToBeDeleted);

        if (result)
        {
            KudosDeleted(_kudosToBeDeleted);
        }

        _hidden = true;
    }

    private int _kudosToBeDeleted;

    private void DeleteKudos(int kudosId)
    {
        _kudosToBeDeleted = kudosId;

        _hidden = false;
        _confirmKudosDeleteDialog!.Show();

        var t = InvokeAsync(() =>
           {
               StateHasChanged();
           });

        t.Wait();
    }

    // call back from EventHub
    public void KudosDeleted(int kudosId)
    {
        if (_kudosList.ContainsKey(kudosId))
        {
            _kudosList.TryRemove(kudosId, out KudosResponse kudos);

            var t = InvokeAsync(() =>
            {
                StateHasChanged();
            });

            t.Wait();
        }
    }

    public void KudosMessageUpdated(KudosMessage message)
    {
        if (_kudosList.ContainsKey(message.KudosId))
        {
            _kudosList.TryGetValue(message.KudosId, out KudosResponse kudos);

            kudos.Message = message.Message;

            var t = InvokeAsync(() =>
            {
                StateHasChanged();
            });

            t.Wait();
        }
    }

    public void UpdateLikesCountAndToolTip(LikeGateway pLike)
    {
        // The person who sent already has the like updated
        //if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        if (_kudosList == null)
        {
            return;
        }



        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);


        var t = InvokeAsync(() =>
        {


            if (_kudosList.ContainsKey(pLike.KudosId))
            {
                var kudo = _kudosList[pLike.KudosId];

                if (!kudo.Likes.Where(l => l.Id == pLike.FromPerson.Id).Any())
                {

                    kudo.Likes.Add(new Person()
                        {
                            Id = pLike.FromPerson.Id,
                            Name = pLike.FromPerson.Name,
                            Photo = pLike.FromPerson.Photo
                        });

                }
            }
            else
            {
                _ = LoadKudos();
            }

            //_likesToUpdate.TryAdd(pLike.KudosId, kudo.Likes.Count);

            //  UpdateCount(numberOfLikes[kudo.Id], kudo.Likes.Count);

            StateHasChanged();


        });

        t.Wait();

    }


    public void UpdateLikesCallBack(LikeGateway pLike)
    {

        if (pLike.FromPerson is null)  
            return;

        UpdateLikesCountAndToolTip(pLike);



    }

    public void UpdateUndoLikesCountAndToolTip(LikeGateway pLike)
    {

        // The person who sent already has the like updated
        //if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        if (_kudosList == null)
            return;


        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);


        if (_kudosList.ContainsKey(pLike.KudosId))
        {
            var kudo = _kudosList[pLike.KudosId];

            var like = kudo.Likes.Where(l => l.Id == pLike.FromPerson.Id).FirstOrDefault();


            if (kudo.Likes.Contains(like))
            {




                kudo.Likes.Remove(like);
            }
            else
            {
                //force to reload
                _ = LoadKudos();
            }

         
        }
        else
        {
            //force to reload
            _ = LoadKudos();
        }

        var t = InvokeAsync(() =>
       {
           StateHasChanged();


       });

        t.Wait();


    }

    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {

        //if (pLike.FromPerson.Id == User.ObjectId)
            //return;

        UpdateUndoLikesCountAndToolTip(pLike);

    }

    public void UpdateKudos(KudosResponse pKudos)
    {

        var t = InvokeAsync(() =>
      {
          if (_kudosList == null)
          {
              _=  LoadKudos();
              return;
          }

          if (!_kudosList.ContainsKey(pKudos.Id))
          {

              if (!_kudosList.TryAdd(pKudos.Id, pKudos))
              {
                  _= LoadKudos();
              }

              StateHasChanged();

          }
      });

        t.Wait();
    }



    public void CommentsDeleted(CommentsRequest pComments)
    {

        if (_kudosList == null)
        {
            var t = InvokeAsync(() =>
                     {
                         _ = LoadKudos();
                     });

            t.Wait();
            return;
        }

        if (_kudosList.ContainsKey(pComments.KudosId))
        {
            var kudo = _kudosList[pComments.KudosId];

            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();

            if (kudo.Comments.Contains(comments))
            {
                kudo.Comments.Remove(comments);

                var t = InvokeAsync(() =>
                 {
                     StateHasChanged();
                 });

                t.Wait();

            }

        }
        else
        {
            var t = InvokeAsync(() =>
               {
                   _ = LoadKudos();
               });

            t.Wait();
        }

    }

    public void CommentsSent(CommentsRequest pComments)
    {
        if (_kudosList == null)
        {
            var t = InvokeAsync(() =>
            {
                _ =LoadKudos();
            });


            t.Wait();

             return;
        }

        if (_kudosList.ContainsKey(pComments.KudosId))
        {
            var kudo = _kudosList[pComments.KudosId];

            if (!kudo.Comments.Contains(pComments.Id))
            {

                kudo.Comments.Add(pComments.Id);

                var t = InvokeAsync(() =>
                 {
                     StateHasChanged();
                 });

                t.Wait();

            }

        }
        else
        {

            var t = InvokeAsync(() =>
             {
                 _ = LoadKudos();
             });

            t.Wait();

            
        }

            
    }

    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.UserProfileId);
        }

        return filled;
    }

    private void UpdateDisabledLike(int kudosId, bool disabled)
    {
        var t = InvokeAsync(() =>
        {
            if (_disabledButtons.ContainsKey(kudosId))
            {
                _disabledButtons[kudosId] = disabled;
            }
            else
            {
                _disabledButtons.Add(kudosId, disabled);
            }


        });

        t.Wait();

    }



    // private void LikeKudosClick(KudosResponse item)
    // {


    //     lock (_lock)
    //     {
    //         if (LikeDisabled(item.Id))
    //             return;

    //         //disable button to avoid user click twice
    //         UpdateDisabledLike(item.Id, true);
    //     }

    //     var t = InvokeAsync(() =>
    //     {
    //         if (_kudosList.ContainsKey(item.Id))
    //         {
    //             var kudo = _kudosList[item.Id];


    //             var requestLike = new LikeGateway(KudosId: item.Id,
    //                                         FromPerson: new Person
    //                                             {
    //                                                 Id = User.UserProfileId,
    //                                                 Name = User.DisplayName,
    //                                                 Photo = User.Photo96x96
    //                                             });


    //             // I am sending all the information as it will update via Event Hub the others users
    //             if (kudo.Likes.Any(l => l.Id == User.UserProfileId))
    //             {
    //                 KudosListView.SendUndoLikeAsync(requestLike);

    //                 UpdateUndoLikesCountAndToolTip(requestLike);

    //             }
    //             else
    //             {

    //                 KudosListView.SendLikeAsync(requestLike);

    //                 UpdateLikesCountAndToolTip(requestLike);
    //             }


    //         }

    //     });

    //     t.Wait();

    // }
     
        
    

    private void ReplyKudos(KudosResponse kudos)
    {

        ReplyCallBack?.Invoke(kudos);
        //await Task.CompletedTask;
    }



    private async Task GetMoreKudos()
    {
        _pageNumber++;

        await LoadKudos(_pageNumber);
    }



}
