@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;


@inject IKudosListView KudosListView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@using System.Text;
@using System.Collections.Concurrent;
@inject IStringLocalizer<App> Localizer

@inject IJSRuntime JSRuntime

<style>
    .infinite-scroll-container {
    height: 300px;
    overflow-y: auto;
    border: 0px solid #ccc;
}

.list-item {
    padding: 10px;
    border-bottom: 0px solid #ccc;
}

.loading-indicator {
    text-align: center;
    padding: 10px;
}

    h1 {
        font-size: 5.9vw;
    }

    h2 {
        font-size: 3.0vh;
    }

    h4 {
        font-size: 3.0vh;
    }

    h5 {
        font-size: 3.0vh;
    }

    p {
        font-size: 2vmin;
    }

</style>
<div 
     style="z-index: auto ;height:76vh;overflow-y:scroll;width:100%;overflow:auto"
     class="infinite-scroll-container" @ref="scrollContainer">


    <div class="list-item" >        

        @foreach (var item in _kudosList.Values.OrderByDescending(k => k.SendOn))
        {

            <Kudos  KudosItem=@item 
                    User=@User 
                    SendLikeCallBack=@SendLikesCallBack 
                    SendUndoLikeCallBack=@SendUndoLikesCallBack 
                    ReplyCallBack=@ReplyKudos 
                    UpdateKudosSentCallBack=@SaveKudos
                    DeleteKudosSentCallBack=@DeleteKudos/>

               /*  <div class="profile" data-is-focusable="true" style="width:100%">

                    @if (item.From.Id == User.UserProfileId)
                    {
                    <div style="float:right">

                        <div class="dropdown" style="margin-top: 5px;padding: 0px;width:100%;align-content:end">
                            <button class="dropbtn" style="margin-top: 0px;background:white;align-content:end">
                                <span style="font-stretch:extra-expanded;font-weight: bold;font-size:x-large">...</span>
                            </button>
                            <div class="dropdown-content">
                                <a href="#" @onclick=EditReplyOnClick>
                                    <FluentIcon Name="@FluentIcons.Edit" Slot="start" Size="@IconSize.Size16" Filled=true />

                                </a>
                                <a href="#" @onclick=DeleteReplyOnClick>
                                    <FluentIcon Name="@FluentIcons.Delete" Slot="start" Size="@IconSize.Size16" Filled=true />

                                </a>

                            </div>
                        </div>
                    </div>
                    }

                @*In case of an individual kudos, the image size is bigger*@
                @if(item.Receivers.Count == 1)
                {
                    <div class="avatar">
                        <img src=@item.Receivers[0].Photo style="height:10vh;width:10vh;float:left;border-radius: 50%" />
                    </div>
                }

                <div class="info">

                    <ul class="list-unstyled ">

                        @*In case of an individual kudos, the name is displayed*@
                        @if (item.Receivers.Count == 1)
                        {
                            <li>
                                <h5>@item.Receivers[0].Name</h5>
                            </li>
                        }
                        else
                        {
                            @*for multiple kudos, it's shown just the pictures*@
                            foreach (var receiver in item.Receivers)
                            {
                                <div class="small55" id=@("receiver_" + receiver.Id.ToString())>
                                    <img src=@receiver.Photo
                                         style="height: 5vh;width: 5vh;border-radius: 50%;margin-top:1vh;margin-left:1vw;margin-right:1vw" />
                                    <small style="display:block; text-align:center">@receiver.GivenName</small>
                                 </div>

                                <FluentTooltip Anchor=@("receiver_" + receiver.Id.ToString()) Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>

                                    <span style="margin-left:5px">@receiver.Name</span>
                                    

                                </FluentTooltip>
                            }
                        }
                        
                        <li>
                            <div class="text-wrap small55" style="width: 100%;margin-top:1vh">
                                @if (item.Receivers.Count == 1)
                                {
                                    <small class="card-title pricing-card-title" >@Localizer["Received"] @Localizer["A"] <spam style="font-weight: bold">@item.Title.ToUpper()</spam> </small>
                                }
                                else
                                {
                                    <small class="card-title pricing-card-title">@Localizer["Received_Plural"] @Localizer["A"] <spam style="font-weight: bold">@item.Title.ToUpper()</spam> </small>
                                }
                                
                            </div>
                        </li>
                        <li>
                            <div class="small55">
                                <small style="margin-right:5px;">@Localizer["SentBy"]:</small>
                                <img src=@item.From.Photo
                                     style="height: 26px;width: 26px;border-radius: 50%" />
                                <small style="margin-left:5px;font-weight: bold">@item.From.Name</small>

                            </div>

                        </li>
                        <li>
                            <div class="small55" >
                                <small style="margin-right:5px">@Localizer["SentOn"]:</small>

                                <small style="margin-left:5px">@item.SendOn</small>
                            </div>

                        </li>
                    </ul>
                </div>

                <div class="card-body small55" style="width:100%;padding: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);">

                    <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;min-width:200px;min-height:40px;margin-right:3vw;margin-top:1vh">
                        <small>@item.Message</small>

                    </div>

                    <div style="float:right">

                        <FluentButton style="margin-left:20px;" @onclick=@(()=>ReplyKudos(item))>
                            <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />

                            <div>
                                @item.Comments.Count()
                            </div>

                        </FluentButton>


                        <FluentButton id=@item.Id.ToString() style="margin-left:20px;" @onclick=@(()=>LikeKudosClick(item))
                                  Disabled=@LikeDisabled(item.Id)>
                            <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                                    Filled=@Filled(item) />

                            <div @ref=numberOfLikes[item.Id] id=@($"likevalue_{item.Id}")>
                                @item.Likes.Count()
                            </div>

                        </FluentButton>

                        <FluentTooltip Anchor=@item.Id.ToString() Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>
                                                     
                            @if (item.Likes.Count() > 0)
                            {
                                <ul class="list-unstyled ">
                                    @foreach (var like in item.Likes)
                                    {
                                        <li>
                                            <div>
                                                <img src=@((like.Photo.Contains("data")) ? like.Photo : $"data:image /png;base64,{like.Photo}")
                                                     style="height: 26px;width: 26px;border-radius: 50%;" />
                                                <span style="margin-left:5px">@like.Name</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }

                        </FluentTooltip>

                    </div>

                </div>
            </div> */
           

            
        }
    </div>

    @if (isLoading)
    {
        <div class="loading-indicator">@Localizer["LoadingMoreItems"]</div>
    }

</div>




                         
@code {

    public enum KudosTypeTab
    {
        All,
        ToMe,
        FromMe,
        ToMyDirectReports
    }

    private ConcurrentDictionary<int, KudosResponse> _kudosList;


    [Parameter]
    public UserProfile User { get; set; }

    [Parameter]
    public KudosTypeTab TypeTab { get; set; }


    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public LoadMoreKudosCallback MoreKudosCallback { get; set; }
    public delegate Task LoadMoreKudosCallback();



    private Dictionary<int, bool> _disabledButtons;

    private readonly object _lock = new object();


    private Dictionary<int, ElementReference> numberOfLikes = new();

    private int _pageNumber;

    private ElementReference scrollContainer;

    private bool isLoading = false;

    private string SelectedTimeZoneId { get; set; } = "America/Sao_Paulo";

    protected override void OnInitialized()
    {
        _kudosList = new();
        _disabledButtons = new();

        _pageNumber = 0;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMoreItems();
            await JSRuntime.InvokeVoidAsync("addInfiniteScrollListener", scrollContainer, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnScrollAsync()
    {
        if (!isLoading)
        {
            await LoadMoreItems();
        }
    }

    private async Task LoadMoreItems()
    {
        isLoading = true;
        StateHasChanged();

        await GetMoreKudos();

        isLoading = false;
        StateHasChanged();
    }


    public async Task LoadKudos( int pageNumber = 1)
    {

        if (_kudosList is null)
        {
            _kudosList = new();
        }

        IEnumerable<KudosResponse> kudos = null; 



        switch (TypeTab)
        {
            case KudosTypeTab.All:
                kudos = await KudosListView.GetKudos(pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.FromMe:

                kudos = await KudosListView.GetKudosFromMe(User.UserProfileId.ToString(), pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.ToMe:

                kudos = await KudosListView.GetKudosToMe(User.UserProfileId.ToString(), pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.ToMyDirectReports:

                kudos = await KudosListView.GetKudosToMyDirectReports(User.UserProfileId.ToString(), pageNumber).ConfigureAwait(true);
                break;

        }

        if (kudos is null)
            return;


        foreach (var kudo in kudos)
        {
            if (!_kudosList.ContainsKey(kudo.Id))
            {
                _kudosList.TryAdd(kudo.Id, kudo);
            }
        }

        await InvokeAsync(StateHasChanged).ConfigureAwait(true);
        await Task.Delay(300);



    }

    private void SendLikesCallBack(int pKudosId, Guid pFromPersonId)
    {
        KudosListView.SendLikeAsync(pKudosId, pFromPersonId);
    }

    private void SendUndoLikesCallBack(int pKudosId, Guid pFromPersonId)
    {
        KudosListView.SendUndoLikeAsync(pKudosId, pFromPersonId);
    }

    private void SaveKudos(KudosResponse kudos)
    {
        KudosListView.UpdateKudos(new KudosMessage(kudos.Id, kudos.Message));
    }

    private bool LikeDisabled(int kudosId)
    {
        bool disabled = false;

        if (_disabledButtons.ContainsKey(kudosId))
        {
            disabled = _disabledButtons[kudosId];
        }
        else
        {
            _disabledButtons.Add(kudosId, false);
        }


        return disabled;
    }

    private async Task DeleteKudos(int kudosId)
    {
        bool result = await KudosListView.DeleteKudos(kudosId);

        if (result)
        {
            KudosDeleted(kudosId);
        }
    }

    // call back from EventHub
    public void KudosDeleted(int kudosId)
    {
        if (_kudosList.ContainsKey(kudosId))
        {
            _kudosList.TryRemove(kudosId, out KudosResponse kudos);

            var t = InvokeAsync(() =>
            {
                StateHasChanged();
            });

            t.Wait();
        }
    }

    public void KudosMessageUpdated(KudosMessage message)
    {
        if (_kudosList.ContainsKey(message.KudosId))
        {
            _kudosList.TryGetValue(message.KudosId, out KudosResponse kudos);

            kudos.Message = message.Message;

            var t = InvokeAsync(() =>
            {
                StateHasChanged();
            });

            t.Wait();
        }
    }

    public void UpdateLikesCountAndToolTip(LikeGateway pLike)
    {
        // The person who sent already has the like updated
        //if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        if (_kudosList == null)
        {
            return;
        }



        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);


        var t = InvokeAsync(() =>
        {


            if (_kudosList.ContainsKey(pLike.KudosId))
            {
                var kudo = _kudosList[pLike.KudosId];

                if (!kudo.Likes.Where(l => l.Id == pLike.FromPerson.Id).Any())
                {

                    kudo.Likes.Add(new Person()
                        {
                            Id = pLike.FromPerson.Id,
                            Name = pLike.FromPerson.Name,
                            Photo = pLike.FromPerson.Photo
                        });

                }
            }
            else
            {
                _ = LoadKudos();
            }

            //_likesToUpdate.TryAdd(pLike.KudosId, kudo.Likes.Count);

            //  UpdateCount(numberOfLikes[kudo.Id], kudo.Likes.Count);

            StateHasChanged();


        });

        t.Wait();

    }


    public void UpdateLikesCallBack(LikeGateway pLike)
    {

        if (pLike.FromPerson is null)  
            return;

        UpdateLikesCountAndToolTip(pLike);



    }

    public void UpdateUndoLikesCountAndToolTip(LikeGateway pLike)
    {

        // The person who sent already has the like updated
        //if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        if (_kudosList == null)
            return;


        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);


        if (_kudosList.ContainsKey(pLike.KudosId))
        {
            var kudo = _kudosList[pLike.KudosId];

            var like = kudo.Likes.Where(l => l.Id == pLike.FromPerson.Id).FirstOrDefault();


            if (kudo.Likes.Contains(like))
            {




                kudo.Likes.Remove(like);
            }
            else
            {
                //force to reload
                _ = LoadKudos();
            }

         
        }
        else
        {
            //force to reload
            _ = LoadKudos();
        }

        var t = InvokeAsync(() =>
       {
           StateHasChanged();


       });

        t.Wait();


    }

    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {

        //if (pLike.FromPerson.Id == User.ObjectId)
            //return;

        UpdateUndoLikesCountAndToolTip(pLike);

    }

    public void UpdateKudos(KudosResponse pKudos)
    {

        var t = InvokeAsync(() =>
      {
          if (_kudosList == null)
          {
              _=  LoadKudos();
              return;
          }

          if (!_kudosList.ContainsKey(pKudos.Id))
          {

              if (!_kudosList.TryAdd(pKudos.Id, pKudos))
              {
                  _= LoadKudos();
              }

              StateHasChanged();

          }
      });

        t.Wait();
    }



    public void CommentsDeleted(CommentsRequest pComments)
    {

        if (_kudosList == null)
        {
            var t = InvokeAsync(() =>
                     {
                         _ = LoadKudos();
                     });

            t.Wait();
            return;
        }

        if (_kudosList.ContainsKey(pComments.KudosId))
        {
            var kudo = _kudosList[pComments.KudosId];

            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();

            if (kudo.Comments.Contains(comments))
            {
                kudo.Comments.Remove(comments);

                var t = InvokeAsync(() =>
                 {
                     StateHasChanged();
                 });

                t.Wait();

            }

        }
        else
        {
            var t = InvokeAsync(() =>
               {
                   _ = LoadKudos();
               });

            t.Wait();
        }

    }

    public void CommentsSent(CommentsRequest pComments)
    {
        if (_kudosList == null)
        {
            var t = InvokeAsync(() =>
            {
                _ =LoadKudos();
            });


            t.Wait();

             return;
        }

        if (_kudosList.ContainsKey(pComments.KudosId))
        {
            var kudo = _kudosList[pComments.KudosId];

            if (!kudo.Comments.Contains(pComments.Id))
            {

                kudo.Comments.Add(pComments.Id);

                var t = InvokeAsync(() =>
                 {
                     StateHasChanged();
                 });

                t.Wait();

            }

        }
        else
        {

            var t = InvokeAsync(() =>
             {
                 _ = LoadKudos();
             });

            t.Wait();

            
        }

            
    }

    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.UserProfileId);
        }

        return filled;
    }

    private void UpdateDisabledLike(int kudosId, bool disabled)
    {
        var t = InvokeAsync(() =>
        {
            if (_disabledButtons.ContainsKey(kudosId))
            {
                _disabledButtons[kudosId] = disabled;
            }
            else
            {
                _disabledButtons.Add(kudosId, disabled);
            }


        });

        t.Wait();

    }



    // private void LikeKudosClick(KudosResponse item)
    // {


    //     lock (_lock)
    //     {
    //         if (LikeDisabled(item.Id))
    //             return;

    //         //disable button to avoid user click twice
    //         UpdateDisabledLike(item.Id, true);
    //     }

    //     var t = InvokeAsync(() =>
    //     {
    //         if (_kudosList.ContainsKey(item.Id))
    //         {
    //             var kudo = _kudosList[item.Id];


    //             var requestLike = new LikeGateway(KudosId: item.Id,
    //                                         FromPerson: new Person
    //                                             {
    //                                                 Id = User.UserProfileId,
    //                                                 Name = User.DisplayName,
    //                                                 Photo = User.Photo96x96
    //                                             });


    //             // I am sending all the information as it will update via Event Hub the others users
    //             if (kudo.Likes.Any(l => l.Id == User.UserProfileId))
    //             {
    //                 KudosListView.SendUndoLikeAsync(requestLike);

    //                 UpdateUndoLikesCountAndToolTip(requestLike);

    //             }
    //             else
    //             {

    //                 KudosListView.SendLikeAsync(requestLike);

    //                 UpdateLikesCountAndToolTip(requestLike);
    //             }


    //         }

    //     });

    //     t.Wait();

    // }
     
        
    

    private void ReplyKudos(KudosResponse kudos)
    {

        ReplyCallBack?.Invoke(kudos);
        //await Task.CompletedTask;
    }



    private async Task GetMoreKudos()
    {
        _pageNumber++;

        await LoadKudos(_pageNumber);
    }



}
