@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Common;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@using Microsoft.Extensions.Localization
@using System.Globalization
@using System.Text;
@using System.Collections.Concurrent;

@inject IKudosListView KudosListView;
@inject IStringLocalizer<App> Localizer;
@inject IJSRuntime JSRuntime;
@inject IConfiguration Config;

@inject KudosCommonVariables CommonVariables;

<style>
    .infinite-scroll-container {
    height: 300px;
    overflow-y: auto;
    border: 0px solid #ccc;
}

.list-item {
    padding: 10px;
    border-bottom: 0px solid #ccc;
}

.loading-indicator {
    text-align: center;
    padding: 10px;
}

    h1 {
        font-size: 5.9vw;
    }

    h2 {
        font-size: 3.0vh;
    }

    h4 {
        font-size: 3.0vh;
    }

    h5 {
        font-size: 3.0vh;
    }

    p {
        font-size: 2vmin;
    }

</style>

@if (_isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}else{
    
    <div 
     style="z-index: auto ;height:78vh;overflow-y:scroll;width:100%;overflow:auto"
     class="infinite-scroll-container" @ref="scrollContainer">

    <div class="list-item" >        

        @foreach (var item in KudosListView.KudosList.Values.OrderByDescending(k => k.SendOn))
        {
            <Kudos  KudosItem=@item 
                    SendLikeCallBack=@SendLikesCallBack 
                    SendUndoLikeCallBack=@SendUndoLikesCallBack 
                    ReplyCallBack=@ReplyKudos 
                    UpdateKudosSentCallBack=@SaveKudos
                    DeleteKudosSentCallBack=@DeleteKudos 
                    CanEditOrDeleteKudosInDays = "@CanEditKudosInDays"/>            
        }

        <FluentDialog   @ref="_confirmKudosDeleteDialog" Hidden=@_hidden 
                        style="--dialog-width: 30vw;--dialog-height:auto">

            <div style="margin:10px;vertical-align:central;">

                <p style="font-size:1.2rem;font-weight:100">@Localizer["ConfirmDelete"]</p>
                <p class="small60">@Localizer["ThisActionWillDeleteKudos"]</p>
                <p class="small60">@Localizer["KudosCommentsAndLikesWillBeDeleted"]</p>

                <FluentButton   Appearance="Appearance.Accent" Autofocus="true" 
                                @onclick="CancelDeleteOnClick">@Localizer["Cancel"]</FluentButton>

                <FluentButton   @onclick="ConfirmDeleteOnClick">@Localizer["Confirm"]</FluentButton>

            </div>
        </FluentDialog>

            @if (isLoading)
            {
                <div class="loading-indicator" style="clear: both;">@Localizer["LoadingMoreItems"]</div>
            }
    </div>

   

</div>

}                     
@code {

    [Parameter]
    public UserProfile User { get; set; }

    [Parameter]
    public KudosTypeTab TypeTab { get; set; }

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public LoadMoreKudosCallback MoreKudosCallback { get; set; }
    public delegate Task LoadMoreKudosCallback();

    public bool VisualizeJustMyTeam { get; set; }

    private int CanEditKudosInDays;

    private Dictionary<int, bool> _disabledButtons;

    private int _pageNumber;

    private ElementReference scrollContainer;

    private bool isLoading = false;

    private FluentDialog? _confirmKudosDeleteDialog;
    private bool _hidden = true;

    private int _kudosToBeDeleted;
    bool _isLoading = true;

    protected override void OnInitialized()
    {
        _disabledButtons = new();

        _pageNumber = 0;

        CanEditKudosInDays = int.Parse(Config["CanEditOrDeleteKudosInDays"]);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMoreItems();

            _isLoading = false;
            RefreshPage();

            try
            {
                await JSRuntime.InvokeVoidAsync("addInfiniteScrollListener", scrollContainer, DotNetObjectReference.Create(this));
            }
            catch{}            
        }

        if (_confirmKudosDeleteDialog != null)
        {
            _confirmKudosDeleteDialog!.Hide();
        }
    }

    //called by the infinite scroll
    [JSInvokable]
    public async Task OnScrollAsync()
    {
        if (!isLoading)
        {
            await LoadMoreItems();
        }
    }

    private async Task LoadMoreItems()
    {
        isLoading = true;
        StateHasChanged();

        await GetMoreKudos();

        isLoading = false;
        StateHasChanged();
    }

    private async Task GetMoreKudos()
    {
        //I just increase the pageNumber in case there are more kudos available
        if (await LoadKudos(_pageNumber +1))
            _pageNumber++;

    }

    public async Task ReloadKudos()
    {
        _pageNumber = 1;

        await  LoadKudos();
    }

    public async Task<string> ExportToCSV()
    {
        return await KudosListView.ExportToCsv();
    }


    public async Task<bool> LoadKudos(int pageNumber = 1)
    {
        var result = await KudosListView.LoadKudos(pageNumber, TypeTab);

        await InvokeAsync(StateHasChanged).ConfigureAwait(true);
        await Task.Delay(300);

        return result;

    }

    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == CommonVariables.User.UserProfileId);
        }

        return filled;
    }

    private void UpdateDisabledLike(int kudosId, bool disabled)
    {
        var t = InvokeAsync(() =>
        {
            if (_disabledButtons.ContainsKey(kudosId))
            {
                _disabledButtons[kudosId] = disabled;
            }
            else
            {
                _disabledButtons.Add(kudosId, disabled);
            }

        });

        t.Wait();

    }

    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }

    /// <summary>
    /// This callback cames from an user control.
    /// It is used to send likes to the kudos.
    /// </summary>
    /// <param name="pKudosId"></param>
    /// <param name="pFromPersonId"></param>
    private void SendLikesCallBack(int pKudosId, Guid pFromPersonId)
    {
        KudosListView.SendLikeAsync(pKudosId, pFromPersonId);
    }

    /// <summary>
    /// This callback cames from an user control.
    /// It is used to unlike the kudos.
    /// </summary>
    /// <param name="pKudosId"></param>
    /// <param name="pFromPersonId"></param>
    private void SendUndoLikesCallBack(int pKudosId, Guid pFromPersonId)
    {
        KudosListView.SendUndoLikeAsync(pKudosId, pFromPersonId);
    }

    /// <summary>
    /// This allows user to save the kudos message after finishing to edit it.
    /// </summary>
    /// <param name="kudos"></param>
    private void SaveKudos(KudosResponse kudos)
    {
        KudosListView.UpdateKudos(new KudosMessage(kudos.Id, kudos.Message));
    }

    /// <summary>
    /// Disable the like button to avoid user clicking twice.
    /// </summary>
    /// <param name="kudosId"></param>
    /// <returns></returns>
    private bool LikeDisabled(int kudosId)
    {
        bool disabled = false;

        if (_disabledButtons.ContainsKey(kudosId))
        {
            disabled = _disabledButtons[kudosId];
        }
        else
        {
            _disabledButtons.Add(kudosId, false);
        }

        return disabled;
    }

    /// <summary>
    /// In case user gave up of deleting the kudos
    /// </summary>
    private void CancelDeleteOnClick()
    {
        _confirmKudosDeleteDialog!.Hide();
        _hidden = true;
    }

    /// <summary>
    /// It happens when user clicks on the Delete Kudos button.
    /// This method will pop up a confirmation deletion message to user.
    /// Notice that this method doesn't delete the kudos, but just show a prompt to user.
    /// </summary>
    /// <param name="kudosId"></param>
    private void DeleteKudos(int kudosId)
    {
        _kudosToBeDeleted = kudosId;

        _hidden = false;
        _confirmKudosDeleteDialog!.Show();

        RefreshPage();
    }

    /// <summary>
    /// Deletes the Kudos after user have confirmed
    /// </summary>
    /// <returns></returns>
    private async Task ConfirmDeleteOnClick()
    {
        bool deleted = await KudosListView.DeleteKudos(_kudosToBeDeleted);

        if (deleted)
        {
            //it can happens after user deleting all the kudos of the page
            if (KudosListView.KudosList.Count == 0)
                await ReloadKudos();

            RefreshPage();
        }
        _hidden = true;
    }

    /// <summary>
    /// Callback from Event Hub.
    /// It is used to sync the kudos list.
    /// In this case to remove the kudos from the local list.
    /// </summary>
    /// <param name="kudosId"></param>
    public void KudosDeleted(int kudosId)
    {
        if (KudosListView.DeleteKudosLocally(kudosId))
            RefreshPage();

    }
    /// <summary>
    /// Forces page to refresh the UI
    /// </summary>
    private void RefreshPage()
    {
        var t = InvokeAsync(() =>
            {
                StateHasChanged();
            });

        t.Wait();
    }

    /// <summary>
    /// Callback from Event Hub.
    /// It is used to update locally the Kudos' message that was edited by other user.
    /// </summary>
    /// <param name="message"></param>
    public void KudosMessageUpdated(KudosMessage message)
    {
        if (KudosListView.KudosMessageUpdatedLocally(message))
            RefreshPage();
    }

    public void UpdateLikesCountAndToolTip(LikeGateway pLike)
    {

        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);

        var t = InvokeAsync(() =>
        {

            if (KudosListView.UpdateLikesCountAndToolTipLocally(pLike))
            {
                StateHasChanged();
            }

        });

        t.Wait();
    }

    /// <summary>
    /// This method is called via Event Hub.
    /// It is used to update the likes.
    /// </summary>
    /// <param name="pLike"></param>
    public void UpdateLikesCallBack(LikeGateway pLike)
    {

        if (pLike.FromPerson is null)  
            return;

        UpdateLikesCountAndToolTip(pLike);

    }

    /// <summary>
    /// This method is called via Event hubs and it is used to sync the likes
    /// </summary>
    /// <param name="pLike"></param>
    public void UpdateUndoLikesCountAndToolTip(LikeGateway pLike)
    {
        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);

        if (KudosListView.UpdateUnLikesCountAndToolTipLocally(pLike))
            RefreshPage();

    }

    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {
        UpdateUndoLikesCountAndToolTip(pLike);
    }

    /// <summary>
    /// This method is called via Event Hub to update the kudos
    /// </summary>
    /// <param name="pKudos"></param>
    public void UpdateKudos(KudosResponse pKudos)
    {
        if (KudosListView.UpdateKudosLocally(pKudos))
            RefreshPage();
    }


    /// <summary>
    /// This method is called via EventHub and it is used to sync the comments
    /// </summary>
    /// <param name="pComments"></param>
    public void CommentsDeleted(CommentsRequest pComments)
    {

        if (KudosListView.CommentsDeletedLocaly(pComments))
            RefreshPage();

    }

    public void CommentsSent(CommentsRequest pComments)
    {
        if (KudosListView.CommentsSentLocally(pComments))
            RefreshPage();
    }



    



}
