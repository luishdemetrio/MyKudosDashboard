@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IKudosListView KudosListView;

<div class="list-group list-group-checkable d-grid gap-1 border-0 " style="height:68.7vh;overflow-y:scroll">

    @foreach (var item in kudos)
    {

        <div class="profile" data-is-focusable="true">

            <div class="avatar">
                <img src=@item.To.Photo style="height:80px;width:80px;float:left;border-radius: 50%" />
            </div>

            <div class="info">

                <ul class="list-unstyled ">
                    <li>
                        <h5>@item.To.Name</h5>
                    </li>

                    <li>
                        <div class="text-wrap" style="width: 16rem;">
                            <spam class="card-title pricing-card-title">received a <spam style="font-weight: bold">@item.Title.ToUpper()</spam> kudos</spam>
                        </div>
                    </li>
                    <li>
                        <div>
                            <span style="margin-right:5px">Sent by</span>
                            <img src=@item.From.Photo
                             style="height: 26px;width: 26px;border-radius: 50%" />
                            <span style="margin-left:5px;font-weight: bold">@item.From.Name</span>

                        </div>

                    </li>
                    <li>
                        <div>
                            <span style="margin-right:5px">Sent on:</span>
                            
                            <span style="margin-left:5px">@item.SendOn</span>
                        </div>

                    </li>
                </ul>
            </div>

            <div class="card-body" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);}">

                <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;">
                    @item.Message
                </div>

                <div style="float:right">
                   @* <FluentButton style="margin-left:20px;">
                        <FluentIcon Name="@FluentIcons.CodeText" Slot="start" Size="@IconSize.Size16" Filled=false />
                        Read more
                    </FluentButton>*@
                   
                    <FluentButton id=@item.Id style="margin-left:20px;" @onclick=@(()=>Like(item.Id, item.To.Id))>
                        <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16" 
                                    Filled=@Filled(item)
                            />
                        @item.Likes.Count()
                    </FluentButton>

                    <FluentTooltip Anchor=@item.Id Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Bottom>

                        @if (item.Likes.Count() > 0)
                        {
                             <ul class="list-unstyled ">
                                @foreach (var like in item.Likes)
                                {
                                    <li>
                                        <div>
                                            <img src=@like.Photo
                                                 style="height: 26px;width: 26px;border-radius: 50%;" />
                                            <span style="margin-left:5px">@like.Name</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }                        
                    </FluentTooltip>


                  @*  <FluentButton style="margin-left:20px;">
                        <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />
                        0
                    </FluentButton>*@
                </div>


            </div>
        </div>


    }
</div>

@code {

    [Parameter]
    public IEnumerable<KudosResponse> kudos { get; set; } 

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    

    protected override void OnAfterRender(bool firstRender)
    {

        base.OnAfterRender(firstRender);

        KudosListView.LikeCallback = UpdateLikeCallback;
        KudosListView.KudosCallback = UpdateKudosCallback;

        


        //if (firstRender)
        //{
        //    StateHasChanged();
        //}

        //StateHasChanged();
    }


    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
          filled =  item.Likes.Any(l => l.Id == User.ObjectId);
        }

        return filled;
    }

    private async void Like(string kudosId, string toPersonId)
    {

        UpdateLikes(kudosId, User.ObjectId);

        await KudosListView.SendLikeAsync(
                new Like(
                    KudosId: kudosId,
                    FromPersonId: User.ObjectId,
                    ToPersonId: toPersonId
                )
            );
            
      
        

        //if (success)
        //{
        //    UpdateLikes(kudosId, User.ObjectId);

        //    StateHasChanged();
        //}

    }


    private void UpdateLikeCallback(Like like)
    {
        // The person who sent already has the like updated
        if (like.FromPersonId == User.ObjectId)
            return;

        UpdateLikes(like.KudosId, like.FromPersonId);
    }

    private void UpdateLikes(string kudosId, string personId)
    {
        var kudo = kudos.Where(k => k.Id == kudosId).FirstOrDefault();

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == personId).FirstOrDefault();


            if ((like is null) || (!kudo.Likes.Contains(like)))
            {

                kudo.Likes.Add(new Person()
                    {
                        Id = personId,
                        Name = User.DisplayName,
                        Photo = UserPhoto
                    });
            }
            else
            {
                kudo.Likes.Remove(like);
            }
        }
    }


    private void UpdateKudosCallback(KudosResponse pKudos)
    {
        var k = kudos.Select(k => k.Id == pKudos.Id);

        if (k == null)
        {
            kudos.Append(pKudos);
          //  InvokeAsync(StateHasChanged);
        }
        
    }


   

    

}
