@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IKudosListView KudosListView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@using System.Text;
@inject IStringLocalizer<App> Localizer

@inject IJSRuntime JSRuntime

    @*style="height:68.7vh;overflow-y:scroll;width:100%">*@
<div class="list-group list-group-checkable d-grid gap-1 border-0 " style="z-index: auto ;min-height:500px;height:80vh;overflow-y:scroll;width:100%;overflow:auto">

    
    <InfiniteScroll ObserverTargetId="observerTarget"
                    ObservableTargetReached="(e) => GetMoreKudos()">


        @foreach (var item in kudos)
        {

            <div  class="profile" data-is-focusable="true">

                <div class="avatar">
                    <img src=@item.To.Photo style="height:64px;width:64px;float:left;border-radius: 50%" />
                </div>

                <div class="info">

                    <ul class="list-unstyled ">
                        <li>
                            <h5>@item.To.Name</h5>
                        </li>

                        <li>
                            <div class="text-wrap" style="width: 100%;">
                                <spam class="card-title pricing-card-title">@Localizer["Received"] @Localizer["A"] <spam style="font-weight: bold">@item.Title.ToUpper()</spam> </spam>
                            </div>
                        </li>
                        <li>
                            <div>
                                <span style="margin-right:5px">@Localizer["SentBy"]:</span>
                                <img src=@item.From.Photo
                                     style="height: 26px;width: 26px;border-radius: 50%" />
                                <span style="margin-left:5px;font-weight: bold">@item.From.Name</span>

                            </div>

                        </li>
                        <li>
                            <div>
                                <span style="margin-right:5px">@Localizer["SentOn"]:</span>

                                <span style="margin-left:5px">@item.SendOn</span>
                            </div>

                        </li>
                    </ul>
                </div>

                <div class="card-body" style="width:100%;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);}">

                    <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;min-width:200px;min-height:40px;">
                        @item.Message
                       
                    </div>

                    <div style="float:right">

                        <FluentButton style="margin-left:20px;" @onclick=@(()=>ReplyKudos(item))>
                            <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />

                            <div>
                                @item.Comments.Count()
                            </div>

                        </FluentButton>


                        <FluentButton id=@item.Id style="margin-left:20px;" @onclick=@(()=>Like(item.Id, item.To.Id))>
                            <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                                        Variant=@Filled(item) />

                            <div>
                                @item.Likes.Count()
                            </div>

                        </FluentButton>

                        <FluentTooltip Anchor=@item.Id Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Bottom>

                           @* <div @ref=tooltipLikes[item.Id]>
                               
                            </div>*@

                            @if (item.Likes.Count() > 0)
                            {
                                <ul class="list-unstyled ">
                                    @foreach (var like in item.Likes)
                                    {
                                        <li>
                                            <div >
                                                <img src=@like.Photo
                                                     style="height: 26px;width: 26px;border-radius: 50%;" />
                                                <span style="margin-left:5px">@like.Name</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                         
                        </FluentTooltip>

                    </div>

                </div>
            </div>


        }

        <spain id="observerTarget"></spain>
</InfiniteScroll>


   
    

</div>

@code {

    [Parameter]
    public IEnumerable<KudosResponse> kudos { get; set; } 

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }


    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public LoadMoreKudosCallback MoreKudosCallback { get; set; }
    public delegate Task LoadMoreKudosCallback();

    //private Dictionary<string, ElementReference> numberOfLikes = new();

    //private Dictionary<string, ElementReference> tooltipLikes = new();

    //private Dictionary<string, ElementReference> numberOfComments = new();

    //private Dictionary<string, ElementReference> kudosHTML = new();


    private bool _shouldRender =true;

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    //protected override void OnParametersSet()
    //{
    //    _shouldRender = 
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    //foreach (var item in kudos.ToList())
    //    //{
    //    //    await UpdateNumberOfLikes(item.Id);
    //    //}

    //}

    private async Task UpdateHtmlBlock(object obj, object value)
    {

        await UpdateHTMLValue("updateInnerHTML", obj, value);


    }
    private async Task UpdateCount(object obj, object value)
    {

        await UpdateHTMLValue("updateCount", obj, value);

    }

    private async Task UpdateHTMLValue(string javascriptMethod, object obj, object value)
    {

        for (int attempts = 0; attempts < 3; attempts++)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync(javascriptMethod, obj, value);


                break;
            }
            catch (JSDisconnectedException)
            {
                await InvokeAsync(StateHasChanged).ConfigureAwait(true);
            }

            await Task.Delay(300);
        }

    }

    public async Task<bool> UpdateNumberOfLikes(string kudosId)
    {

        // it's not guaranteed that the kudos will be there since we are using infinite loop

        var kudo = kudos.Where(k => k.Id == kudosId).FirstOrDefault();

        if (kudo is null)
            return true;


        _shouldRender = true;

              await InvokeAsync(StateHasChanged).ConfigureAwait(true);
            await Task.Delay(300);

        //if (!numberOfLikes.ContainsKey(kudosId))
        //{
        //    await InvokeAsync(StateHasChanged).ConfigureAwait(true);
        //    await Task.Delay(300);
        //    return false;
        //}


        //await UpdateCount(numberOfLikes[kudosId], kudo.Likes.Count).ConfigureAwait(true);


        //var innerHtmlToolTip = "<ul class='list-unstyled'>";

        //foreach (var like in kudo.Likes)
        //{
        //    innerHtmlToolTip += $"<li><div><img src={like.Photo} style='height: 26px;width: 26px;border-radius: 50%;'/> <span style='margin-left:5px'>{like.Name}</span></div></li>";
        //}

        //innerHtmlToolTip += "</ul>";


        //if (tooltipLikes.ContainsKey(kudosId))
        //{
        //    await UpdateHtmlBlock(tooltipLikes[kudosId], innerHtmlToolTip);
        //}




        return true;

    }


    public async Task UpdateKudos(KudosResponse pKudos)
    {

        var kudo = kudos.Where(k => k.Id == pKudos.Id).FirstOrDefault();

        if (kudo == null)
        {
            kudos.Append(pKudos);
            _shouldRender = true;
            await Task.Delay(1000);
        }

        await InvokeAsync(StateHasChanged);

        await Task.Delay(300);
        // await UpdateNumberOfLikes(kudo.Id);
    }



    public async Task<bool> UpdateNumberOfComments(string kudosId, int kudosCount)
    {

        var kudo = kudos.Where(k => k.Id == kudosId).FirstOrDefault();

        if (kudo is null)
            return true;
        
            
        //if (!numberOfComments.ContainsKey(kudosId))
        //{
            await InvokeAsync(StateHasChanged).ConfigureAwait(true);
            await Task.Delay(300).ConfigureAwait(false);

            return false;
        //}

        //if (numberOfComments.ContainsKey(kudosId))
        //{
        //    await UpdateCount(numberOfComments[kudosId], kudosCount).ConfigureAwait(true);

        //}

       // return true;

    }


    private IconVariant Filled(KudosResponse item)
    {
        IconVariant filled = IconVariant.Regular;

        @if (User != null)
        {
            if (item.Likes.Any(l => l.Id == User.ObjectId))
                filled = IconVariant.Filled;
        }

        return filled;
    }

    private async Task Like(string kudosId, string toPersonId)
    {

        var kudo = kudos.Where(k => k.Id == kudosId).FirstOrDefault();

        if (kudo != null)
        {

            if (kudo.Likes.Any(l => l.Id == User.ObjectId))
            {
                await KudosListView.SendUndoLikeAsync(
                    new Like(
                        KudosId: kudosId,
                        FromPerson: new Person
                            {
                                Id = User.ObjectId,
                                Name = User.DisplayName,
                                Photo = UserPhoto
                            },
                        ToPersonId: toPersonId
                    )
                );
            }
            else
            {
                await KudosListView.SendLikeAsync(
                       new Like(
                           KudosId: kudosId,
                           FromPerson: new Person
                               {
                                   Id = User.ObjectId,
                                   Name = User.DisplayName,
                                   Photo = UserPhoto
                               },
                           ToPersonId: toPersonId
                       )
                   );

            }

        }

        await UpdateLikes(kudosId, User.ObjectId);



    }

    private async Task ReplyKudos(KudosResponse kudos)
    {

        ReplyCallBack?.Invoke(kudos);
        await Task.CompletedTask;
    }


    private async Task UpdateLikes(string kudosId, string personId)
    {

        var kudo = kudos.Where(k => k.Id == kudosId).FirstOrDefault();

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == personId).FirstOrDefault();


            if ((like is null) || (!kudo.Likes.Contains(like)))
            {

                kudo.Likes.Add(new Person()
                    {
                        Id = personId,
                        Name = User.DisplayName,
                        Photo = UserPhoto
                    });
            }
            else
            {
                kudo.Likes.Remove(like);
            }


            //if (numberOfLikes.ContainsKey(kudosId))
            //{
            //    await UpdateCount(numberOfLikes[kudosId], kudo.Likes.Count);

            //}


        }

        await Task.CompletedTask;

    }

    private async Task GetMoreKudos()
    {
        if (MoreKudosCallback !=null)
        await MoreKudosCallback.Invoke();
    }


}
