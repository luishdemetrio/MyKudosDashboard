@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IKudosListView KudosListView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@using System.Text;
@using System.Collections.Concurrent;
@inject IStringLocalizer<App> Localizer

@inject IJSRuntime JSRuntime

<style>
    .infinite-scroll-container {
    height: 300px;
    overflow-y: auto;
    border: 0px solid #ccc;
}

.list-item {
    padding: 10px;
    border-bottom: 0px solid #ccc;
}

.loading-indicator {
    text-align: center;
    padding: 10px;
}

</style>
<div 
     style="z-index: auto ;min-height:500px;height:80vh;overflow-y:scroll;width:100%;overflow:auto"
     class="infinite-scroll-container" @ref="scrollContainer">

    <div class="list-item" >

        

        @foreach (var item in _kudosList.Values.OrderByDescending(k => k.SendOn))
        {

            <div class="profile" data-is-focusable="true">

                <div class="avatar">
                    <img src=@item.To.Photo style="height:64px;width:64px;float:left;border-radius: 50%" />
                </div>

                <div class="info">

                    <ul class="list-unstyled ">
                        <li>
                            <h5>@item.To.Name</h5>
                        </li>

                        <li>
                            <div class="text-wrap" style="width: 100%;">
                                <spam class="card-title pricing-card-title">@Localizer["Received"] @Localizer["A"] <spam style="font-weight: bold">@item.Title.ToUpper()</spam> </spam>
                            </div>
                        </li>
                        <li>
                            <div>
                                <span style="margin-right:5px">@Localizer["SentBy"]:</span>
                                <img src=@item.From.Photo
                                     style="height: 26px;width: 26px;border-radius: 50%" />
                                <span style="margin-left:5px;font-weight: bold">@item.From.Name</span>

                            </div>

                        </li>
                        <li>
                            <div>
                                <span style="margin-right:5px">@Localizer["SentOn"]:</span>

                                <span style="margin-left:5px">@item.SendOn</span>
                            </div>

                        </li>
                    </ul>
                </div>

                <div class="card-body" style="width:100%;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);}">

                    <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;min-width:200px;min-height:40px;">
                        @item.Message

                    </div>

                    <div style="float:right">

                        <FluentButton style="margin-left:20px;" @onclick=@(()=>ReplyKudos(item))>
                            <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />

                            <div>
                                @item.Comments.Count()
                            </div>

                        </FluentButton>


                        <FluentButton id=@item.Id.ToString() style="margin-left:20px;" @onclick=@(()=>LikeKudosClick(item))
                                  Disabled=@LikeDisabled(item.Id)>
                            <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                                    Filled=@Filled(item) />

                            <div @ref=numberOfLikes[item.Id] id=@($"likevalue_{item.Id}")>
                                @item.Likes.Count()
                            </div>

                        </FluentButton>

                        <FluentTooltip Anchor=@item.Id.ToString() Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Bottom>

                            @* <div @ref=tooltipLikes[item.Id]>

                        </div>*@

                            @if (item.Likes.Count() > 0)
                            {
                                <ul class="list-unstyled ">
                                    @foreach (var like in item.Likes)
                                    {
                                        <li>
                                            <div>
                                                <img src=@like.Photo
                                                     style="height: 26px;width: 26px;border-radius: 50%;" />
                                                <span style="margin-left:5px">@like.Name</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }

                        </FluentTooltip>

                    </div>

                </div>
            </div>


        }
    </div>

    @if (isLoading)
    {
        <div class="loading-indicator">@Localizer["LoadingMoreItems"]</div>
    }

</div>




                         
@code {

    public enum KudosTypeTab
    {
        All,
        ToMe,
        FromMe
    }

    private ConcurrentDictionary<int, KudosResponse> _kudosList;

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    [Parameter]
    public KudosTypeTab TypeTab { get; set; }


    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public LoadMoreKudosCallback MoreKudosCallback { get; set; }
    public delegate Task LoadMoreKudosCallback();

    private Dictionary<int, bool> _disabledButtons;

    private readonly object _lock = new object();


    private Dictionary<int, ElementReference> numberOfLikes = new();

    private int _pageNumber;

    private ElementReference scrollContainer;
    private ElementReference contentContainer;
    private bool isLoading = false;


    protected override void OnInitialized()
    {
        _kudosList = new();
        _disabledButtons = new();

        _pageNumber = 0;



    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMoreItems();
            await JSRuntime.InvokeVoidAsync("addInfiniteScrollListener", scrollContainer, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnScrollAsync()
    {
        if (!isLoading)
        {
            await LoadMoreItems();
        }
    }

    private async Task LoadMoreItems()
    {
        isLoading = true;
        StateHasChanged();

        await GetMoreKudos();

        isLoading = false;
        StateHasChanged();
    }


    public async Task LoadKudos( int pageNumber = 1)
    {

        if (_kudosList is null)
        {
            _kudosList = new();
        }

        IEnumerable<KudosResponse> kudos = null; 

        

        switch (TypeTab)
        {
            case KudosTypeTab.All:
                kudos = await KudosListView.GetKudos(pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.FromMe:

                kudos = await KudosListView.GetKudosFromMe(User.ObjectId, pageNumber).ConfigureAwait(true);
                break;

            case KudosTypeTab.ToMe:

                kudos = await KudosListView.GetKudosToMe(User.ObjectId, pageNumber).ConfigureAwait(true);
                break;

        }

        if (kudos is null)
            return;


        foreach (var kudo in kudos)
        {
            if (!_kudosList.ContainsKey(kudo.Id))
            {
                _kudosList.TryAdd(kudo.Id, kudo);
            }
        }

        await InvokeAsync(StateHasChanged).ConfigureAwait(true);
        await Task.Delay(300);



    }


    private bool LikeDisabled(int kudosId)
    {
        bool disabled = false;

        if (_disabledButtons.ContainsKey(kudosId))
        {
            disabled = _disabledButtons[kudosId];
        }
        else
        {
            _disabledButtons.Add(kudosId, false);
        }


        return disabled;
    }


    private void UpdateHtmlBlock(object obj, object value)
    {

        UpdateHTMLValue("updateInnerHTML", obj, value);


    }
    private void UpdateCount(object obj, object value)
    {


        UpdateHTMLValue("updateCount", obj, value);

    }

    private void UpdateHTMLValue(string javascriptMethod, object obj, object value)
    {

        InvokeAsync(() =>
      {
          for (int attempts = 0; attempts < 3; attempts++)
          {
              try
              {
                  JSRuntime.InvokeVoidAsync(javascriptMethod, obj, value);


                  break;
              }
              catch (JSDisconnectedException)
              {
                  StateHasChanged();
              }

          }
      });



    }


    public void UpdateLikesCountAndToolTip(LikeGateway pLike)
    {
        // The person who sent already has the like updated
        //if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        if (_kudosList == null)
        {
            return;
        }



        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);


        var t = InvokeAsync(() =>
        {


            if (_kudosList.ContainsKey(pLike.KudosId))
            {
                var kudo = _kudosList[pLike.KudosId];

                if (!kudo.Likes.Where(l => l.Id == pLike.FromPerson.Id).Any())
                {

                    kudo.Likes.Add(new Person()
                        {
                            Id = pLike.FromPerson.Id,
                            Name = pLike.FromPerson.Name,
                            Photo = pLike.FromPerson.Photo
                        });

                }
            }
            else
            {
                _ = LoadKudos();
            }

            //_likesToUpdate.TryAdd(pLike.KudosId, kudo.Likes.Count);

            //  UpdateCount(numberOfLikes[kudo.Id], kudo.Likes.Count);

            StateHasChanged();


        });

        t.Wait();

    }


    public void UpdateLikesCallBack(LikeGateway pLike)
    {

        if (pLike.FromPerson is null)  
            return;

        UpdateLikesCountAndToolTip(pLike);



    }

    public void UpdateUndoLikesCountAndToolTip(LikeGateway pLike)
    {

        // The person who sent already has the like updated
        //if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        if (_kudosList == null)
            return;


        // enable like button
        UpdateDisabledLike(pLike.KudosId, false);


        if (_kudosList.ContainsKey(pLike.KudosId))
        {
            var kudo = _kudosList[pLike.KudosId];

            var like = kudo.Likes.Where(l => l.Id == pLike.FromPerson.Id).FirstOrDefault();


            if (kudo.Likes.Contains(like))
            {




                kudo.Likes.Remove(like);
            }
            else
            {
                //force to reload
                _ = LoadKudos();
            }

         
        }
        else
        {
            //force to reload
            _ = LoadKudos();
        }

        var t = InvokeAsync(() =>
       {
           StateHasChanged();


       });

        t.Wait();


    }

    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {

        //if (pLike.FromPerson.Id == User.ObjectId)
            //return;

        UpdateUndoLikesCountAndToolTip(pLike);

    }

    public void UpdateKudos(KudosResponse pKudos)
    {

        var t = InvokeAsync(() =>
      {
          if (_kudosList == null)
          {
              _=  LoadKudos();
              return;
          }

          if (!_kudosList.ContainsKey(pKudos.Id))
          {

              if (!_kudosList.TryAdd(pKudos.Id, pKudos))
              {
                  _= LoadKudos();
              }

              StateHasChanged();

          }
      });

        t.Wait();
    }



    public void CommentsDeleted(CommentsRequest pComments)
    {

        if (_kudosList == null)
        {
            var t = InvokeAsync(() =>
                     {
                         _ = LoadKudos();
                     });

            t.Wait();
            return;
        }

        if (_kudosList.ContainsKey(pComments.KudosId))
        {
            var kudo = _kudosList[pComments.KudosId];

            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();

            if (kudo.Comments.Contains(comments))
            {
                kudo.Comments.Remove(comments);

                var t = InvokeAsync(() =>
                 {
                     StateHasChanged();
                 });

                t.Wait();

            }

        }
        else
        {
            var t = InvokeAsync(() =>
               {
                   _ = LoadKudos();
               });

            t.Wait();
        }

    }

    public void CommentsSent(CommentsRequest pComments)
    {
        if (_kudosList == null)
        {
            var t = InvokeAsync(() =>
            {
                _ =LoadKudos();
            });


            t.Wait();

             return;
        }

        if (_kudosList.ContainsKey(pComments.KudosId))
        {
            var kudo = _kudosList[pComments.KudosId];

            if (!kudo.Comments.Contains(pComments.Id))
            {

                kudo.Comments.Add(pComments.Id);

                var t = InvokeAsync(() =>
                 {
                     StateHasChanged();
                 });

                t.Wait();

            }

        }
        else
        {

            var t = InvokeAsync(() =>
             {
                 _ = LoadKudos();
             });

            t.Wait();

            
        }

            
    }

    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.ObjectId);
        }

        return filled;
    }

    private void UpdateDisabledLike(int kudosId, bool disabled)
    {
        var t = InvokeAsync(() =>
        {
            if (_disabledButtons.ContainsKey(kudosId))
            {
                _disabledButtons[kudosId] = disabled;
            }
            else
            {
                _disabledButtons.Add(kudosId, disabled);
            }


        });

        t.Wait();

    }



    private void LikeKudosClick(KudosResponse item)
    {


        lock (_lock)
        {
            if (LikeDisabled(item.Id))
                return;

            //disable button to avoid user click twice
            UpdateDisabledLike(item.Id, true);
        }

        var t = InvokeAsync(() =>
        {
            if (_kudosList.ContainsKey(item.Id))
            {
                var kudo = _kudosList[item.Id];


                var requestLike = new LikeGateway(KudosId: item.Id,
                                            FromPerson: new Person
                                                {
                                                    Id = User.ObjectId,
                                                    Name = User.DisplayName,
                                                    Photo = UserPhoto
                                                },
                                            ToPersonId: item.To.Id);


                // I am sending all the information as it will update via Event Hub the others users
                if (kudo.Likes.Any(l => l.Id == User.ObjectId))
                {
                    KudosListView.SendUndoLikeAsync(requestLike);

                    UpdateUndoLikesCountAndToolTip(requestLike);

                }
                else
                {

                    KudosListView.SendLikeAsync(requestLike);

                    UpdateLikesCountAndToolTip(requestLike);
                }


            }

        });

        t.Wait();

    }
     
        
    

    private async Task ReplyKudos(KudosResponse kudos)
    {

        ReplyCallBack?.Invoke(kudos);
        await Task.CompletedTask;
    }



    private async Task GetMoreKudos()
    {
        _pageNumber++;

        await LoadKudos(_pageNumber);
    }


}
