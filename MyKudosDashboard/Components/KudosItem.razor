@using MyKudosDashboard.Models;


@if (Item != null)
{


    <div class="profile" data-is-focusable="true">

        <div class="avatar">
            <img src=@Item.To.Photo style="height:80px;width:80px;float:left;border-radius: 50%" />
        </div>

        <div class="info">

            <ul class="list-unstyled;float:left ">
                <li>
                    <h5>@Item.To.Name</h5>
                </li>

                <li>
                    <div class="text-wrap" style="width: 100%;">
                        <spam class="card-title pricing-card-title">received a <spam style="font-weight: bold">@Item.Title.ToUpper()</spam></spam>
                    </div>
                </li>
                <li>
                    <div>
                        <span style="margin-right:5px">Sent by</span>
                        <img src=@Item.From.Photo
                        style="height: 26px;width: 26px;border-radius: 50%" />
                        <span style="margin-left:5px;font-weight: bold">@Item.From.Name</span>

                    </div>

                </li>
                <li>
                    <div>
                        <span style="margin-right:5px">Sent on:</span>

                        <span style="margin-left:5px">@Item.SendOn</span>
                    </div>

                </li>
            </ul>
        </div>

        <div class="card-body" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);}">

            <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;">
                @Item.Message
            </div>

            <div style="float:right">
                @* <FluentButton style="margin-left:20px;">
            <FluentIcon Name="@FluentIcons.CodeText" Slot="start" Size="@IconSize.Size16" Filled=false />
            Read more
            </FluentButton>*@




                <FluentButton style="margin-left:20px;" @onclick=@(()=>ReplyKudos(Item)) Disabled=@ShowDetailed >
                    <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />
                    0
                </FluentButton>

                <FluentButton id=@Item.Id style="margin-left:20px;" @onclick=@(()=>Like(Item.Id, Item.To.Id))>
                    <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                            Filled=@Filled(Item) />
                    @Item.Likes.Count()
                </FluentButton>

                <FluentTooltip Anchor=@Item.Id Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Bottom>

                    @if (Item.Likes.Count() > 0)
                    {
                        <ul class="list-unstyled ">
                            @foreach (var like in Item.Likes)
                            {
                                <li>
                                    <div>
                                        <img src=@like.Photo
                                        style="height: 26px;width: 26px;border-radius: 50%;" />
                                        <span style="margin-left:5px">@like.Name</span>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                </FluentTooltip>

            </div>

        </div>


        @if (ShowDetailed)
        {
            <div>
                <div style="width:20%">
                    <img src=@Item.To.Photo style="height:40px;width:40px;float:left;border-radius: 50%" />
                </div>

                <div style="float: left;width:80%;">
                    <FluentTextArea style="margin-left:10px;margin-top:5px;width:100%" Resize="TextAreaResize.Both" />
                </div>
            </div>
        }

    </div>
}


@code {

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    [Parameter]
    public bool ShowDetailed { get; set; }

    [Parameter]
    public KudosResponse Item { get; set; }



    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

       
    }


    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.ObjectId);
        }

        return filled;
    }

    private void Like(string kudosId, string toPersonId)
    {

        UpdateLikes(kudosId, User.ObjectId);

    }

    private async Task ReplyKudos(KudosResponse kudos)
    {

       // ReplyCallBack?.Invoke(kudos);

    }

    private void UpdateLikeCallback(Like like)
    {
        // The person who sent already has the like updated
        if (like.FromPerson.Id == User.ObjectId)
            return;

        UpdateLikes(like.KudosId, like.FromPerson.Id);
    }

    private void UpdateLikes(string kudosId, string personId)
    {
        //var kudo = kudos.Where(k => k.Id == kudosId).FirstOrDefault();

        //if (kudo != null)
        //{
        //    var like = kudo.Likes.Where(k => k.Id == personId).FirstOrDefault();


        //    if ((like is null) || (!kudo.Likes.Contains(like)))
        //    {

        //        kudo.Likes.Add(new Person()
        //            {
        //                Id = personId,
        //                Name = User.DisplayName,
        //                Photo = UserPhoto
        //            });
        //    }
        //    else
        //    {
        //        kudo.Likes.Remove(like);
        //    }
        //}
    }


    private void UpdateKudosCallback(KudosResponse pKudos)
    {
        //var k = kudos.Select(k => k.Id == pKudos.Id);

        //if (k == null)
        //{
        //    kudos.Append(pKudos);
        //    //  InvokeAsync(StateHasChanged);
        //}

    }



}
