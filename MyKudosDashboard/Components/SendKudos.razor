@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ISendKudosView SendKudosView;
@inject IJSRuntime JSRuntime;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer

 

<style>

    fluent-card {
        padding: 5px;
        margin: 5px;
        height: 55px
    }

    fluent-horizontal-scroll {
        max-width: 620px;
        margin-top: 20px;
        margin-left: 0px;
        margin-right: 10px;
        
    }

    .both-gradient {
        --scroll-fade-next: var(--fill-color);
        --scroll-fade-previous: var(--fill-color)
    }

    .top-align {
        --scroll-align: flex-start
    }

    .bottom-align {
        --scroll-align: flex-end
    }



</style>

<FluentDialog   @ref=SendKudosFluentDialog
                TrapFocus="true" aria-label="Simple dialog" Modal="true" 
                class="both-gradient"  style="--dialog-height: 600px;--dialog-width: 680px;"   
                Hidden=@ModalHidden
              @ondismiss=OnDismiss>

<div style="margin:10px;">

        <h5>👏 @Localizer["SendKudosToPeople"]</h5>

        <table class="table">
            <tbody>
                <tr>
                    <td scope="row">
                      
                        <p style="margin-bottom: 5px;">@Localizer["SelectColleague"]</p>
                    
                         <BlazoredTypeahead SearchMethod="@SearchEmployees"
                                           @bind-Value="@SelectedEmployee"
                                           Debounce="500" style="witdh:80px"
                                           
                                           >
                            <SelectedTemplate >
                                @if (string.IsNullOrEmpty(context.Photo))
                                {
                                    <span style="margin-left:5px">@context.Name</span>
                                }
                                else
                                {
                                    <div>
                                        <img src=@context.Photo
                                             style="height: 26px;width: 26px;border-radius: 50%" />
                                        <span style="margin-left:5px">@context.Name</span>
                                    </div>
                                }
                                
                                
                            </SelectedTemplate>
                            <ResultTemplate >
                                  @if (string.IsNullOrEmpty(context.Photo))
                                {
                                    <span style="margin-left:5px">@context.Name</span>
                                }
                                else
                                {
                                <div>
                                    <img src=@context.Photo
                                         style="height: 26px;width: 26px;border-radius: 50%;" />
                                    <span style="margin-left:5px">@context.Name</span>
                                </div>
                                }
                            </ResultTemplate>
                            <NotFoundTemplate>
                                @Localizer["SorryNoResultsFound"]
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                   

                    </td>

                </tr>
                <tr>
                    <td scope="row">

                        <p style="margin-bottom: 5px;">@Localizer["Category"]</p>
                        
                        @if (recognitions != null)
                        {
                            <FluentHorizontalScroll Speed="600" Easing=ScrollEasing.EaseInOut class="both-gradient"  >

                                @foreach (var item in recognitions.OrderBy(r => r.DisplayOrder))
                                {

                                   @* using System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(new System.Drawing.Bitmap(1, 1));

                                    var size = graphics.MeasureString(@item.Title, new System.Drawing.Font("Segoe UI", 16, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point));*@


                                 @*   <div class="@(item.IsSelected ? "card border border-primary " : "card ")"
                                         style="width:@(@size.Width +40)px;height: 55px" >*@

                                    <div class="@(item.IsSelected ? "card border border-primary " : "card ")"
                                         style="width:120px;height: 100px">

                                        <div style="padding:0px;padding-top:2px;font-family:'Segoe UI';font-size:medium;overflow-wrap: break-word;" data-toggle="tooltip" data-placement="top" title=@item.Description>
                                            <h3 style="text-align:center;margin-bottom: 0px;">@item.Emoji</h3>
                                            <span class="btn stretched-link" style="float: left;padding-top:5px;padding-left:0px;Segoe UI';font-size:medium"
                                          @onclick=@(() => RecognitionClick(item))>@item.Title</span>

                                            
                                        </div>
                                    </div>

                                    
                                }


                            </FluentHorizontalScroll>
                        }
                    </td>
                   
                </tr>

                <tr>
                    <td scope="row" >

                        <p style="margin-bottom: 5px;">@Localizer["Message"]</p>
                        
                        <div class="input-group">
                           
                            <textarea class="form-control" aria-label="With textarea" style="height:160px"
                                      @onchange="KudosMessageChanged" value=@KudosMessage />
                                
                            
                        </div>

                    </td>

                </tr>

                <tr>
                   
                    <td scope="row" >

                        @if (isLoading)
                        {
                            <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>
                       
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                📩 @Localizer["Send"]
                        </button>
                        }else
                        {
                            <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>
                                📩 @Localizer["Send"]
                            </button>
                        }


                        @*<button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=@(()=>Hide() )>✖️ Cancel</button>*@

                    </td>

                </tr>

            </tbody>
        </table>

        
    </div>

</FluentDialog>



@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public UserInfo UserProfile { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    private bool isLoading = false;
    private bool btnSendKudosDisabled = false;

    private IEnumerable<RecognitionViewModel> recognitions;

    private UserViewModel SelectedEmployee { get; set; }

    private string KudosMessage;

    public delegate void SendKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public SendKudosCallBack sendKudosCallBack { get; set; }

    private FluentDialog SendKudosFluentDialog;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        recognitions = await SendKudosView.GetRecognitionsAsync();


      
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);

    //    if (firstRender && recognitions == null)
    //    {

    //        recognitions = await SendKudosView.GetRecognitionsAsync();

    //    }
    //}


    public async Task SendKudosModal()
    {

        //sendKudosCallBack = pSendKudosCallBack;

        KudosMessage = string.Empty;

        //await InvokeAsync(() =>
        //{
        SelectedEmployee = null;

        ModalHidden = false;
        KudosMessage = string.Empty;

        await InvokeAsync(StateHasChanged);

        await Task.CompletedTask;
        //});
    }

    private void RecognitionClick(RecognitionViewModel recognition)
    {
        foreach (var item in recognitions)
        {
            item.IsSelected = false;
        }

        recognition.IsSelected = !recognition.IsSelected;

    }

    private Task<IEnumerable<UserViewModel>> SearchEmployees(string searchText)
    {   
        return SendKudosView.GetUsersAsync(searchText);

    }

    private void KudosMessageChanged(ChangeEventArgs args)
    {
        KudosMessage = args.Value.ToString();
    }


    private void BlockSendButton(bool block)
    {
        isLoading = block;
        btnSendKudosDisabled = block;

    }

    private async Task SendKudosClick()
    {
        string kudosId = string.Empty;

        KudosRequest kudos = null;

        var t = Task.Run(() =>
        {
            var recognition = recognitions.Where(r => r.IsSelected).FirstOrDefault();

            if (recognition == null || SelectedEmployee == null || string.IsNullOrEmpty(KudosMessage))
            {
                JSRuntime.InvokeVoidAsync("alert", "Please inform all fields!");

                return;
            }

            BlockSendButton(true);

            InvokeAsync(() => StateHasChanged());

            kudos = new(
                    From: new Person()
                        {
                            Id = UserProfile.ObjectId,
                            Name = UserProfile.DisplayName,
                            Photo = UserPhoto
                        },
                    To: new Person()
                        {
                            Id = SelectedEmployee.Id,
                            Name = SelectedEmployee.Name,
                            Photo = SelectedEmployee.Photo
                        },
                    Reward: new Reward(
                        Id: recognition.Id,
                        Title: recognition.Title
                    ),
                    Message: KudosMessage,
                    SendOn: DateTime.Now
                );





        });

        await t;

        if (kudos == null)
            return;

        kudosId = await SendKudosView.Send(kudos);


        if (t.IsCompleted && !string.IsNullOrEmpty(kudosId))
        {
           
            await InvokeAsync(() =>
             {
                 BlockSendButton(false);
                 ClearFields();
                 Hide();
                 StateHasChanged();
             });


            }
        
    }

    private void ClearFields()
    {
        
    }

    

    public void Hide()
    {
        ModalHidden = true;
        SendKudosFluentDialog!.Hide();
         
        
            
    }

    private void OnDismiss()
    {
        Hide();
    }


}
