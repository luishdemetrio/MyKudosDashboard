@using MyKudosDashboard.Helper;
@*@using Microsoft.Graph;
@using Microsoft.Identity.Web;
@inject GraphServiceClient graphClient;
@inject ITokenAcquisition _tokenAcquisition*@
<style>

    fluent-card {
        padding: 5px;
        margin: 5px;
        height: 55px
    }

    fluent-horizontal-scroll {
        max-width: 620px;
        margin-top: 20px;
        margin-left: 0px;
        margin-right: 10px;
        
    }

    .both-gradient {
        --scroll-fade-next: var(--fill-color);
        --scroll-fade-previous: var(--fill-color)
    }
</style>

<FluentDialog @ref=SendKudosFluentDialog TrapFocus="true" aria-label="Simple dialog" Modal="true" class="both-gradient"  style="--dialog-height: 560px;--dialog-width: 680px;" @ondismiss=OnDismiss>


<div style="margin:10px;">

        <h5>👏 Send Kudos to people</h5>

        <table class="table">
            <tbody>
                <tr>
                    <td scope="row">
                      
                        <p style="margin-bottom: 5px;">Select colleague</p>
                    
                         <BlazoredTypeahead SearchMethod="@SearchEmployees"
                                           @bind-Value="@SelectedEmployee"
                                           Debounce="500">
                            <SelectedTemplate>
                                @context.Name
                            </SelectedTemplate>
                            <ResultTemplate>
                                @context.Name 
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Sorry, there weren't any search results.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                   

                    </td>

                </tr>
                <tr>
                    <td scope="row">

                        <p style="margin-bottom: 5px;">Title</p>
                        
                        <FluentHorizontalScroll Speed="600" Easing=ScrollEasing.EaseInOut class="both-gradient"  >

                            @foreach (var item in recognitions)
                            {
                                
                                    using System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(new System.Drawing.Bitmap(1, 1));

                                    var size = graphics.MeasureString(@item.Description, new System.Drawing.Font("Segoe UI", 16, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point));


                                <div class="@(item.IsSelected ? "card border border-primary" : "card")" style="width:@(@size.Width + 40)px;height: 55px">
                                            <div style="padding:0px;padding-top:2px;font-family:'Segoe UI';font-size:medium">
                                            <h3 style="float: left;">@item.Emoji</h3>
                                            <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:0px" @onclick=@(() => RecognitionClick(item))>@item.Description</span>
                                            </div>
                                        </div>
                                    
                                
                                
                            }

                          @*  <div class="card" style="width:138px;height: 55px">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">🏆</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px">Awesome</span>
                                </div>
                            </div>


                            <div class="card" style="width:144px;height: 55px">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">✨</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px">Thank you</span>
                                </div>
                            </div>
                     

                            <div class="card" style="width:182px;height: 55px">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">🎉</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px">Congratulations</span>
                                </div>
                            </div>

                            <div class="card" style="width:132px;height: 55px">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">🏅</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px">Achiever</span>
                                </div>
                            </div>


                            <div class="card" style="width:182px;height: 55px">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">💡</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px">Problem solver</span>
                                </div>
                            </div>
                            <div class="card" style="width:134px;height: 55px">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">🦁</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px">Courage</span>
                                </div>
                            </div>


                            <div @ref=TeamPlayerCard class="card border border-primary" style="width:160px;height: 55px;">
                                <div class="card-body" style="padding:0px;padding-top:2px">
                                    <h3 style="float: left;">🏀</h3>
                                    <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:5px" @onclick=RecognitionClick>Team player</span>
                                </div>
                            </div>*@


                        </FluentHorizontalScroll>
                        
                    </td>
                   
                </tr>

                <tr>
                    <td scope="row" >

                        <p style="margin-bottom: 5px;">Message</p>
                        
                        <div class="input-group">
                           
                            <textarea class="form-control" aria-label="With textarea" style="height:160px"></textarea>
                        </div>

                    </td>

                </tr>

                <tr>
                   
                    <td scope="row" >
                        <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=Hide>📩 Send</button>
                        <button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=Hide>✖️ Cancel</button>

                    </td>

                </tr>

            </tbody>
        </table>

        
    </div>

</FluentDialog>



@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    private List<Recognition> recognitions;

    private class Recognition {


        public string Emoji { get; set; }
        public string Description { get; set; }
        public bool IsSelected { get; set; }

        public Recognition(string emoji, string description, bool isSelected )
        {
            Emoji = emoji;
            Description = description;
            IsSelected = isSelected;

        }
    }

    private record Person (string Name, string email);


    private List<Person> Employees { get; set; }
    private Person SelectedEmployee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var settings = Settings.LoadSettings();
        GraphHelper.InitializeGraphForAppOnlyAuth(settings);

        Employees = new();
        recognitions = new();

        recognitions.Add(new Recognition("🏆", "Awesome", false ));
        recognitions.Add(new Recognition("✨", "Thank you", false));
        recognitions.Add(new Recognition("🎉", "Congratulations", false));
        recognitions.Add(new Recognition("🏅", "Achiever", false));
        recognitions.Add(new Recognition("💡", "Problem Solver", false));
        recognitions.Add(new Recognition("🦁", "Courage", false));
        recognitions.Add(new Recognition("🏀", "Team Player", false));

    }

    private void RecognitionClick(Recognition recognition)
    {

        recognitions.ForEach(i => i.IsSelected = false);

        recognition.IsSelected = !recognition.IsSelected;

    }

    private async Task<IEnumerable<Person>> SearchEmployees(string searchText)
    {

        var settings = Settings.LoadSettings();        

        await GetUsersAsync(searchText);

        return Employees.Where(e => e.Name.ToLower().Contains(searchText.ToLower()));
    }



    async Task GetUsersAsync(string name)
    {

        var userPage = await GraphHelper.GetUsers(name);

        Employees.Clear();

        foreach (var user in userPage.value)
        {
            Employees.Add(new Person(user.displayName, user.userPrincipalName));

        }

    }


    public delegate void CloseModalParameterButtonClick();

    public CloseModalParameterButtonClick closeModalParameter;

    private FluentDialog SendKudosFluentDialog;

    public void Show(CloseModalParameterButtonClick closeModalParameterButtonClick)
    {

        closeModalParameter = closeModalParameterButtonClick;

        ModalHidden = false;

        SendKudosFluentDialog!.Show();
          StateHasChanged();

    }

    public void Hide()
    {
        SendKudosFluentDialog!.Hide();
    }

    private void OnDismiss()
    {
        Hide();
    }


}
