@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ISendKudosView SendKudosView;
@inject IJSRuntime JSRuntime;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer

<style>

    fluent-card {
        padding: 5px;
        margin: 5px;
        height: 55px
    }

    fluent-horizontal-scroll {
        max-width: 620px;
        margin-top: 20px;
        margin-left: 0px;
        margin-right: 10px;
    }

    .both-gradient {
        --scroll-fade-next: var(--fill-color);
        --scroll-fade-previous: var(--fill-color)
    }

    .top-align {
        --scroll-align: flex-start
    }

    .bottom-align {
        --scroll-align: flex-end
    }

  
</style>

<FluentDialog @ref=SendKudosFluentDialog
               aria-label="Simple dialog" Modal="true"
              class="both-gradient" style="--dialog-height: 680px;--dialog-width: 680px;"
              Hidden=@ModalHidden>

    <div style="margin:10px;" >

        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">👏 @Localizer["SendKudosToPeople"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick=@(() => Hide())>
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            </div>
       

        <table class="table">
            <tbody>
                <tr>
                    <td scope="row" style="height:130px">

                        <p style="margin-bottom: 5px;">@Localizer["SelectColleague"]</p>

                        <BlazoredTypeahead SearchMethod="@SearchEmployees"
                                           @bind-Value="@SelectedEmployee"
                                           Debounce="500" style="width:100%;height:40px;">
                            <SelectedTemplate>
                                @if (string.IsNullOrEmpty(context.Photo))
                                {
                                    <span style="margin-left:5px;">@context.Name</span>
                                }
                                else
                                {
                                    <div style="height:40px;">
                                        <img src=@context.Photo
                                             style="height: 26px;width: 26px;border-radius: 50%" />
                                        <span style="margin-left:5px">@context.Name</span>
                                    </div>
                                }


                            </SelectedTemplate>
                            <ResultTemplate>
                                @if (string.IsNullOrEmpty(context.Photo))
                                {
                                    <span style="margin-left:5px">@context.Name</span>
                                }
                                else
                                {
                                    <div>
                                        <img src=@context.Photo
                                             style="height: 26px;width: 26px;border-radius: 50%;" />
                                        <span style="margin-left:5px">@context.Name</span>
                                    </div>
                                }
                            </ResultTemplate>
                            <NotFoundTemplate>
                                @Localizer["SorryNoResultsFound"]
                            </NotFoundTemplate>
                        </BlazoredTypeahead>


                    </td>

                </tr>
                <tr>
                    <td scope="row">

                        <p style="margin-bottom: 5px;padding-top:2px">@Localizer["Category"]:</p>

                        @if (recognitions != null)
                        {


                            <div id="myCarousel" class="carousel carousel-dark slide carousel-fade" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;">

                             

                                <div class="carousel-inner" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;width:100%">

                                  
                                    @for (int i = 0; i < recognitions.Count(); i++)
                                    {

                                        <div id=@recognitions.ElementAt(i).RecognitionId class="@(i == 0 ? "carousel-item active" : "carousel-item")"
                                             style="padding-left: 0px;padding-right: 0px;">

                                            <div class="bd-placeholder-img bd-placeholder-img-lg d-block w-100" style="overflow-wrap: break-word;">

                                                <div class="card"
                                                     style="width:100%;height: 140px;overflow-wrap: break-word;">

                                                    <div style="padding:0px;padding-top:2px;font-family:'Segoe UI';font-size:small"
                                                         data-toggle="tooltip" data-placement="top"
                                                         title=@recognitions.ElementAt(i).Description>



                                                        <h5 style="float: left;padding-top:2px;padding-left:0px;text-align:center;width:100%">
                                                            @recognitions.ElementAt(i).Emoji @recognitions.ElementAt(i).Title
                                                        </h5>

                                                        <span style="float: left;padding-top:2px;padding-left:0px;font-size:medium;text-align:center;overflow-wrap: break-word;">@recognitions.ElementAt(i).Description</span>

                                                        <span style="float: left;padding-top:5px;padding-left:0px;font-size:small;text-align:center;width:100%">@(i+1) / @(recognitions.Count())</span>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                    }


                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev"
                                        style="padding-top: 80px;">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next"
                                        style="padding-top: 80px;">
                                    >
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        }
                    </td>

                </tr>

                <tr>
                    <td scope="row">

                        <p style="margin-bottom: 5px;padding-top:2px">@Localizer["Message"]</p>

                        <div class="input-group">

                            <textarea class="form-control" aria-label="With textarea" style="height:160px"
                                      @onchange="KudosMessageChanged" value=@KudosMessage />


                        </div>

                    </td>

                </tr>

                <tr>

                    <td scope="row">

                        @if (isLoading)
                        {
                            <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>

                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                📩 @Localizer["Send"]
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>
                                📩 @Localizer["Send"]
                            </button>
                        }


                        @*<button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=@(()=>Hide() )>✖️ Cancel</button>*@

                    </td>

                </tr>

            </tbody>
        </table>


    </div>

</FluentDialog>



@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public UserInfo UserProfile { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    private bool isLoading = false;
    private bool btnSendKudosDisabled = false;

    private IEnumerable<Recognition> recognitions;

    private UserViewModel SelectedEmployee { get; set; }

    private string KudosMessage;

    public delegate void SendKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public SendKudosCallBack sendKudosCallBack { get; set; }

    private FluentDialog SendKudosFluentDialog;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        recognitions = await SendKudosView.GetRecognitionsAsync();



    }


    public async Task SendKudosModal()
    {

        //sendKudosCallBack = pSendKudosCallBack;

        KudosMessage = string.Empty;

        //await InvokeAsync(() =>
        //{
        SelectedEmployee = null;

        ModalHidden = false;
        KudosMessage = string.Empty;

        await InvokeAsync(StateHasChanged);

        await Task.CompletedTask;
        //});
    }

    //private void RecognitionClick(RecognitionViewModel recognition)
    //{
    //    foreach (var item in recognitions)
    //    {
    //        item.IsSelected = false;
    //    }

    //    recognition.IsSelected = !recognition.IsSelected;

    //}

    private Task<IEnumerable<UserViewModel>> SearchEmployees(string searchText)
    {
        return SendKudosView.GetUsersAsync(searchText);

    }

    private void KudosMessageChanged(ChangeEventArgs args)
    {
        KudosMessage = args.Value.ToString();
    }


    private void BlockSendButton(bool block)
    {
        isLoading = block;
        btnSendKudosDisabled = block;

    }

    private async Task SendKudosClick()
    {
        string kudosId = string.Empty;

        KudosRequest kudos = null;

        int slideIndex = await JSRuntime.InvokeAsync<int>("getCarouselActiveSlideIndex");

        var t = Task.Run(() =>
        {

            var recognition = recognitions.ElementAt(slideIndex);


            if ( SelectedEmployee == null || string.IsNullOrEmpty(KudosMessage))
            {
                JSRuntime.InvokeVoidAsync("alert", "Please inform all fields!");

                return;
            }

            BlockSendButton(true);

            InvokeAsync(() => StateHasChanged());

            kudos = new(
                    From: new Person()
                        {
                            Id = UserProfile.ObjectId,
                            Name = UserProfile.DisplayName,
                            Photo = UserPhoto
                        },
                    To: new Person()
                        {
                            Id = SelectedEmployee.Id,
                            Name = SelectedEmployee.Name,
                            Photo = SelectedEmployee.Photo
                        },
                    Reward: new Reward(
                        Id: recognition.RecognitionId,
                        Title: recognition.Title
                    ),
                    Message: KudosMessage,
                    SendOn: DateTime.Now
                );





        });

        await t;

        if (kudos == null)
            return;

        kudosId = await SendKudosView.Send(kudos);


        if (t.IsCompleted && !string.IsNullOrEmpty(kudosId))
        {

            await InvokeAsync(() =>
             {
                 BlockSendButton(false);
                 ClearFields();
                 Hide();
                 StateHasChanged();
             });


        }

    }

    private void ClearFields()
    {

    }



    public void Hide()
    {
        ModalHidden = true;
        SendKudosFluentDialog!.Hide();



    }

    private void OnDismiss()
    {
        Hide();
    }


}
