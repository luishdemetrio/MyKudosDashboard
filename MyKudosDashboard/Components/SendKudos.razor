@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ISendKudosView SendKudosView;

<style>

    fluent-card {
        padding: 5px;
        margin: 5px;
        height: 55px
    }

    fluent-horizontal-scroll {
        max-width: 620px;
        margin-top: 20px;
        margin-left: 0px;
        margin-right: 10px;
        
    }

    .both-gradient {
        --scroll-fade-next: var(--fill-color);
        --scroll-fade-previous: var(--fill-color)
    }
</style>

<FluentDialog   @ref=SendKudosFluentDialog
                TrapFocus="true" aria-label="Simple dialog" Modal="true" 
                class="both-gradient"  style="--dialog-height: 600px;--dialog-width: 680px;" >

<div style="margin:10px;">

        <h5>👏 Send Kudos to people</h5>

        <table class="table">
            <tbody>
                <tr>
                    <td scope="row">
                      
                        <p style="margin-bottom: 5px;">Select colleague</p>
                    
                         <BlazoredTypeahead SearchMethod="@SearchEmployees"
                                           @bind-Value="@SelectedEmployee"
                                           Debounce="500" style="witdh:80px"
                                           ref=@_typeahead>
                            <SelectedTemplate >
                                <div>
                                    <img src=@context.Photo
                                         style="height: 26px;width: 26px;border-radius: 50%"  />
                                    <span style="margin-left:5px">@context.Name</span>
                                </div>
                                
                            </SelectedTemplate>
                            <ResultTemplate >
                                <div>
                                    <img src=@context.Photo
                                         style="height: 26px;width: 26px;border-radius: 50%;" />
                                    <span style="margin-left:5px">@context.Name</span>
                                </div>
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Sorry, there weren't any search results.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                   

                    </td>

                </tr>
                <tr>
                    <td scope="row">

                        <p style="margin-bottom: 5px;">Title</p>
                        
                        <FluentHorizontalScroll Speed="600" Easing=ScrollEasing.EaseInOut class="both-gradient"  >

                            @foreach (var item in recognitions)
                            {
                                
                                using System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(new System.Drawing.Bitmap(1, 1));

                                var size = graphics.MeasureString(@item.Description, new System.Drawing.Font("Segoe UI", 16, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point));


                                <div class="@(item.IsSelected ? "card border border-primary" : "card")" style="width:@(@size.Width + 40)px;height: 55px">
                                            <div style="padding:0px;padding-top:2px;font-family:'Segoe UI';font-size:medium">
                                            <h3 style="float: left;">@item.Emoji</h3>
                                            <span class="btn stretched-link" style="float: right;padding-top:5px;padding-left:0px" @onclick=@(() => RecognitionClick(item))>@item.Description</span>
                                            </div>
                                        </div>
                                    
                                
                                
                            }


                        </FluentHorizontalScroll>
                        
                    </td>
                   
                </tr>

                <tr>
                    <td scope="row" >

                        <p style="margin-bottom: 5px;">Message</p>
                        
                        <div class="input-group">
                           
                            <textarea class="form-control" aria-label="With textarea" style="height:160px" @onchange="KudosMessageChanged"  ></textarea>
                        </div>

                    </td>

                </tr>

                <tr>
                   
                    <td scope="row" >
                        <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=SendKudosClick>📩 Send</button>
                        <button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=Hide>✖️ Cancel</button>

                    </td>

                </tr>

            </tbody>
        </table>

        
    </div>

</FluentDialog>



@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public UserInfo UserProfile { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    private BlazoredTypeahead<string, string> _typeahead;

    private IEnumerable<RecognitionViewModel> recognitions;

    private UserViewModel SelectedEmployee { get; set; }

    private string KudosMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        recognitions = SendKudosView.GetRecognitions();
    }

    private void RecognitionClick(RecognitionViewModel recognition)
    {
        foreach (var item in recognitions)
        {
            item.IsSelected = false;
        }

        recognition.IsSelected = !recognition.IsSelected;

    }

    private Task<IEnumerable<UserViewModel>> SearchEmployees(string searchText)
    {   
        return Task.FromResult(SendKudosView.GetUsers(searchText));

    }

    private void KudosMessageChanged(ChangeEventArgs args)
    {
        KudosMessage = args.Value.ToString();
    }

    private void SendKudosClick()
    {

        var recognition = recognitions.Where(r => r.IsSelected).FirstOrDefault();

        KudosRequest kudos = new(
                From: new Person()
                {
                    Id = UserProfile.ObjectId,
                    Name = UserProfile.DisplayName,
                    Photo = UserPhoto
                },
                To: new Person()
                {
                    Id = SelectedEmployee.Id,
                    Name = SelectedEmployee.Name,
                    Photo = SelectedEmployee.Photo
                },
                Title : new Reward( 
                    Id:  recognition.Id, 
                    Description: recognition.Description 
                ),
                Message : KudosMessage ,
                SendOn : DateTime.Now
            );

        if (SendKudosView.Send(kudos))
        {   
            closeModalParameter?.Invoke(kudos);
            ClearFields();
            Hide();

        }


    }

    private void ClearFields()
    {
        
    }

    public delegate void CloseModalParameterButtonClick(KudosRequest kudos);

    public CloseModalParameterButtonClick closeModalParameter;

    private FluentDialog SendKudosFluentDialog;
        

    public void Show(CloseModalParameterButtonClick closeModalParameterButtonClick)
    {

        SendKudosFluentDialog!.Show();

        closeModalParameter = closeModalParameterButtonClick;

        ModalHidden = false;

       // await InvokeAsync(() => StateHasChanged());

    }

    public void Hide()
    {
        ModalHidden = true;
        SendKudosFluentDialog!.Hide();
         
        
            
    }

    private void OnDismiss()
    {
        Hide();
    }


}
