@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ISendKudosView SendKudosView;
@inject IJSRuntime JSRuntime;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer
@inject IConfiguration Configuration

<style>

    fluent-card {
        padding: 5px;
        margin: 5px;
        height: 55px
    }

    fluent-horizontal-scroll {
        max-width: 620px;
        margin-top: 20px;
        margin-left: 0px;
        margin-right: 10px;
    }

    .both-gradient {
        --scroll-fade-next: var(--fill-color);
        --scroll-fade-previous: var(--fill-color)
    }

    .top-align {
        --scroll-align: flex-start
    }

    .bottom-align {
        --scroll-align: flex-end
    }

    .blazored-typeahead__controls {
        position: relative;
        cursor: text;
        display: flex;
        width: 100%;
        padding:0px;
        font-size: 1rem;
    }

    .blazored-typeahead__input-mask-wrapper{
        padding: 0px;
        font-size: 1rem;
    }

    .blazored-typeahead__input-mask {
        padding-left: 5px;
        padding-top: 5px;
        padding-bottom: 0px;
        font-size: 1rem;
    }

    .carousel-control-next-icon, .carousel-control-prev-icon {
        display: inline-block;
        width: 2rem;
        height: 1rem;
        background-repeat: no-repeat;
        background-position: 50%;
        background-size: 100% 100%;
        font-size: 1rem;
    }

    .blazored-typeahead__multi-value {
        background-color: #ffffff;
        padding-top: 0vh;
        padding-bottom: 0vh;
        margin-top: 0vh;
        margin-bottom: 1vh;
        font-size: 1rem;
    }

    .blazored-typeahead__input, .blazored-typeahead__input-multi{
        height: 7vh;
        padding-top: 0vh;
        padding-bottom: 0vh;
        margin-top: 0vh;
        margin-bottom: 1vh;
        font-size: 1rem;
    }
    
</style>

<FluentDialog @ref=SendKudosFluentDialog
               aria-label="Simple dialog" Modal="true"
              class="both-gradient" style="--dialog-height: 95vh;--dialog-width: calc(40vw + 180px);"
              Hidden=@ModalHidden>

    <div style="margin:1vh;height:95%;overflow-y:scroll;overflow:auto">

        <div class="modal-content;" style="width:100%">
            <div class="modal-header" style="width:98%">
                <h5 class="modal-title" id="exampleModalLabel">👏 @Localizer["SendKudosToPeople"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float right; color: red" @onclick=@(() => Hide())>
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>       

        <table class="table" style="height:90%">
            <tbody>
                <tr style="height:2vh">
                    <td scope="row" style="height:80px">

                        <small class="small55" style="margin-bottom: 5px;">@Localizer["SelectColleague"]</small>

                       
                        <BlazoredTypeahead SearchMethod="@SearchEmployees" class=""
                                           Debounce="500" style="width:400px;padding:0px;;height:6vh"
                                           MinimumLength="3"
                                           @bind-Values="@SelectedEmployees"
                                           >
                            <SelectedTemplate>
                                @if (string.IsNullOrEmpty(context.Photo))
                                {
                                    <small style="margin-left:5px;padding:0px;height:4vh">@context.Name</small>
                                }
                                else
                                {
                                    <div style="width:100%;height:4vh;padding:0px;margin:0px">
                                        <img src=@context.Photo
                                             style="height: 4vh;width: 4vh;border-radius: 50%" />
                                        <small style="margin-left:5px">@context.Name</small>
                                    </div>
                                }


                            </SelectedTemplate>
                            <ResultTemplate>
                                @if (string.IsNullOrEmpty(context.Photo))
                                {
                                    <small style="margin-left:5px;margin:0px;padding:0px">@context.Name</small>
                                }
                                else
                                {
                                    <div class="small55" style="margin:0px;padding:0px">
                                        <img src=@context.Photo
                                             style="height: 26px;width: 26px;border-radius: 50%;margin:0px;padding:0px" />
                                        <small style="margin-left:5px;margin:0px;padding:0px">@context.Name</small>
                                    </div>
                                }
                            </ResultTemplate>
                            <NotFoundTemplate>
                                @Localizer["SorryNoResultsFound"]
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                       

                    </td>

                </tr>
                <tr>
                    <td scope="row">

                        <small class="small55" style="margin-bottom: 5px;padding-top:2px;">@Localizer["Category"]:</small>

                        @if (recognitions != null)
                        {


                            <div id="myCarousel" class="carousel carousel-dark slide carousel-fade" style="padding: 0px;">
                             

                                <div class="carousel-inner" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;width:100%">

                                  
                                    @for (int i = 0; i < recognitions.Count(); i++)
                                    {

                                        <div id=@recognitions.ElementAt(i).RecognitionId class="@(i == 0 ? "carousel-item active" : "carousel-item")"
                                             style="padding-left: 0px;padding-right: 0px;">

                                            <div class="bd-placeholder-img bd-placeholder-img-lg d-block w-100" style="overflow-wrap: break-word;">

                                                <div class="card"
                                                     style="width:100%;height:22vh ;overflow-wrap: break-word;">

                                                    <div style="padding:0px;padding-top:2px;font-family:'Segoe UI'"
                                                         data-toggle="tooltip" data-placement="top">


                                                        <small class="small50" style="float: left;padding-top:2px;padding-left:0px;text-align:center;width:100%;margin-bottom: 0px">
                                                            @recognitions.ElementAt(i).Emoji @recognitions.ElementAt(i).GroupName
                                                        </small>

                                                        <h4  style="float: left;padding-top:1px;padding-left:0px;text-align:center;width:100%;margin-bottom: 1px">
                                                            @recognitions.ElementAt(i).Title.ToUpper()
                                                        </h4>

                                                        <small class="small40" style="float: left;padding-top:1px;padding-left:0px;text-align:center;overflow-wrap: break-word;">
                                                            @recognitions.ElementAt(i).Description
                                                        </small>

                                                        <small class="small55" style="float: left;padding-top:3px;padding-left:0px;text-align:center;width:100%;">
                                                            @(i + 1) / @(recognitions.Count())
                                                        </small>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                    }


                                </div>

                                <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev"
                                        style="padding-top: 70px;">
                                    <small class="carousel-control-prev-icon small40" aria-hidden="true"></small>
                                    <small class="visually-hidden small40">Previous</small>
                                </button>
                                <button class="carousel-control-next small55" type="button" data-bs-target="#myCarousel" data-bs-slide="next"
                                        style="padding-top: 70px;">
                                    <small class="carousel-control-next-icon " aria-hidden="true"></small>
                                    <small class="visually-hidden ">Next</small>
                                </button>
                            </div>
                        }
                    </td>

                </tr>

                <tr>
                    <td scope="row" >

                       @*  <Rewrite    @ref=RewriteDialog ModalHidden=@RewriteDialogIsHidden 
                                    RewriteCallBack=@/> *@

                        <small class="small55" style="margin-bottom: 1vh;padding-top:1vh;">@Localizer["Message"]</small>

                        <div class="input-group">

                            <textarea class="form-control small55" aria-label="With textarea" style="height:24vh"
                                      @onchange="KudosMessageChanged" value=@KudosMessage />


                        </div>

                    </td>

                </tr>

                <tr>

                    <td scope="row">

                        @if (isLoading)
                        {
                            <button type="button" class="btn btn-primary small50" style="margin-left: 10px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>

                                <small class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></small>
                                📩 @Localizer["Send"]
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary small50" style="margin-left: 10px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>
                                📩 @Localizer["Send"]
                            </button>
                        }

                          <button type="button" class="btn btn-secondary small50" style="margin-left: 10px"
                                @onclick=@(()=>Rewrite() )>
                                ✍️ @Localizer["Rewrite"]
                         </button> 

                    </td>

                </tr>

            </tbody>
        </table>


    </div>

</FluentDialog>

@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public UserInfo UserProfile { get; set; }

    [Parameter]
    public SendKudosCallBack sendKudosCallBack { get; set; }

    private bool isLoading = false;
    private bool btnSendKudosDisabled = false;

    private IEnumerable<RecognitionViewModel> recognitions;

    private IList<Person> SelectedEmployees { get; set; }

    private string KudosMessage;

    public delegate void SendKudosCallBack();

    private FluentDialog SendKudosFluentDialog;

    private bool RewriteDialogIsHidden = false;
    private Rewrite RewriteDialog;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        recognitions = await SendKudosView.GetRecognitionsAsync();

    }

    public async Task SendKudosModal()
    {

        KudosMessage = string.Empty;

        SelectedEmployees = new List<Person>();

        ModalHidden = false;
        KudosMessage = string.Empty;

        await InvokeAsync(StateHasChanged);

        await Task.CompletedTask;
    }


    private async Task<IEnumerable<Person>> SearchEmployees(string searchText)
    {
        var foundEmployees =  await SendKudosView.GetUsersAsync(searchText);

        return foundEmployees.Where(person => !SelectedEmployees.Any(selectedPerson => selectedPerson.Id == person.Id) && person.Id.ToString() != UserProfile.ObjectId);

    }

    private void KudosMessageChanged(ChangeEventArgs args)
    {
        KudosMessage = args.Value.ToString();
    }


    private void BlockSendButton(bool block)
    {
        isLoading = block;
        btnSendKudosDisabled = block;

    }

    private async Task SendKudosClick()
    {
        string kudosId = string.Empty;

        SendKudosRequest kudos = null;

        int slideIndex = await JSRuntime.InvokeAsync<int>("getCarouselActiveSlideIndex");

        var t = Task.Run(() =>
        {

            var recognition = recognitions.ElementAt(slideIndex);


            if (SelectedEmployees.Count == 0|| string.IsNullOrEmpty(KudosMessage))
            {
                JSRuntime.InvokeVoidAsync("alert", (string)Localizer["PleaseInformAllFields"]);

                return;
            }
            var lst = SelectedEmployees as List<Person>;

            if (lst.Exists(u => u.Name == UserProfile.DisplayName))
            {

                JSRuntime.InvokeVoidAsync("alert", (string)Localizer["YouCantSendAKudosToYourself"]);

                return;
            }

            BlockSendButton(true);

            InvokeAsync(() => StateHasChanged());

            DateTime now;

            var timeZone = TimeZoneInfo.FindSystemTimeZoneById(Configuration["WEBSITE_TIME_ZONE"]);
            if (timeZone != null)
            {
                TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone);

                now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone);
            }
            else
            {
                now = DateTime.Now;
            }

            kudos = new SendKudosRequest
            {
                FromPersonId = new Guid(UserProfile.ObjectId),
                ToPersonId = SelectedEmployees.Select(user => user.Id).ToList(),
                RecognitionId = recognition.RecognitionId,
                Message = KudosMessage,
                Date= now //DateTime.Now
            };

        });

        await t;

        if (kudos == null)
            return;

        kudosId = await SendKudosView.Send(kudos);


        if (t.IsCompleted && !string.IsNullOrEmpty(kudosId))
        {

            await InvokeAsync(() =>
             {
                 BlockSendButton(false);
                 Hide();
                 StateHasChanged();

                 sendKudosCallBack?.Invoke();
             });
        }
    }

    public void Hide()
    {
        ModalHidden = true;
        SendKudosFluentDialog!.Hide();
    }

    private void OnDismiss()
    {
        Hide();
    }

    private void Rewrite()
    {

    }

    private void RewriteCallBack(string message)
    {
        KudosMessage = message;        
    }

}
