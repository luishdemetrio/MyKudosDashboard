@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@using Microsoft.Fast.Components.FluentUI

@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams

@inject IWelcomeView WelcomeView;

@if (_isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else if (!_isInTeams ||! string.IsNullOrEmpty(_errorMessage)){
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        @_errorMessage
    </div>
}
else
{

    <style>
        div {
            float: left;
            padding: 5px;
        }

        .div1 {
        }

        .div2 {
        }
    </style>

    <div class="welcome page" style="padding-top:0px">

         
        <div class="row align-items-start" style="clear: both;height:90vh;">
            

            <div class="col-1" style="height:100%;min-width:300px">

                <!-- PROFILE -->
                <div class="card col-12 rounded-3 shadow-sm" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;height:100%">

                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal">🚀 Profile</h4>
                    </div>

                    <UserProfileScore @ref=_userProfileScore User=@_user UserPhoto=@_userPhoto /> 

                    <FluentButton style="height:60px;margin:5px;" @onclick=@(()=>OpenSendKudosPanel()) >
                        <span>Send Kudos</span>
                        <FluentIcon Name="@FluentIcons.Send" Slot="start" Size="@IconSize.Size24" Filled=true />
                    </FluentButton>

                   

                    </div>
                </div>

            <div class="col-5 " style="height:100%">

                <div class="card mb-3 rounded-3 shadow-sm" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;height:100%">
                    <div class="card-header py-3" >
                        <h4 class="my-0 fw-normal" >👏 Kudos</h4>                       
                    </div>

                    <KudosTab @ref=_kudosTab User=@_user UserPhoto=@_userPhoto ReplyCallBack=@ReplyCallBack />
                    
                </div>
            </div>

            <div class="col-2 " style="height:100%">

                <div class="card mb-4 rounded-3 shadow-sm" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;height:100%">

                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal">🥇 Top Contributors</h4>
                    </div>

                    <TopContributors />

                </div>
            </div>

            <SendKudos @ref=_sendKudosPanel ModalHidden=@_sendKudosIsHidden UserProfile=@_user UserPhoto=@_userPhoto
                   sendKudosCallBack=@SendCallBack />
         
        </div>


        <CommentsKudos @ref=_replyKudos ModalHidden=true User=@_user UserPhoto=@_userPhoto />

</div>

}


@code {

    UserInfo _user;

    bool _isInTeams;
    bool _isLoading = true;
    string _errorMessage = string.Empty;

    private string _userPhoto;

    private UserProfileScore _userProfileScore;

    private SendKudos _sendKudosPanel;
    private bool _sendKudosIsHidden = true;

    private void OnOpenModalParameterButtonClick() => _sendKudosIsHidden = false;
    private void OnCloseModalParameterButtonClick() => _sendKudosIsHidden = true;

    private KudosTab _kudosTab;

    private CommentsKudos _replyKudos;


    private void OnDismiss()
    {
        _sendKudosIsHidden = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _isInTeams = await MicrosoftTeams.IsInTeams();
            _errorMessage = string.Empty;

            if (_isInTeams)
            {
                try
                {
                    _user = await teamsUserCredential.GetUserInfoAsync();
                }
                catch
                {
                    _errorMessage = "You don't have access!";
                }               

                if (_user != null)
                {                    
                    _userPhoto = await WelcomeView.GetUserPhoto(_user.ObjectId);
                    
                    WelcomeView.RegisterForUserScoreUpdate(_user.ObjectId);

                    WelcomeView.ScoreCallback = UpdateScoreCallback;

                }
            }
            else
            {
                _errorMessage = "Not running in Microsoft Teams!";
            }

            _isLoading = false;
            StateHasChanged();
        }

    }

    private void UpdateScoreCallback(UserScore userScore)
    {
        _userProfileScore.UpdateScore(userScore);

    }

    private void OpenSendKudosPanel()
    {
        _sendKudosIsHidden = false;

        _sendKudosPanel.SendKudosModal();

    }

    private void SendCallBack(KudosResponse pKudos)
    {
      //  _kudosTab.SendCallBack(pKudos);
    }

    private void ReplyCallBack(KudosResponse pKudos)
    {

        _replyKudos.ShowModal(pKudos);
    }

    
}

