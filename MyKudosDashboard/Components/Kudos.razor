@using Microsoft.Extensions.Localization
@using System.Globalization
@using MyKudos.Gateway.Domain.Models;

@inject IStringLocalizer<App> Localizer

 <div class="profile" data-is-focusable="true" style="width:100%">

     @* if the kudos was sent by the current user, the user can edit or delete it *@
    @if (KudosItem.From.Id == User.UserProfileId)
    {
        <div style="float:right">

            <div class="dropdown" style="margin-top: 5px;padding: 0px;width:100%;align-content:end">
                <button class="dropbtn" style="margin-top: 0px;background:white;align-content:end">
                    <span style="font-stretch:extra-expanded;font-weight: bold;font-size:x-large">...</span>
                </button>
                <div class="dropdown-content">
                    <a href="#" @onclick=EditReplyOnClick>
                        <FluentIcon Name="@FluentIcons.Edit" Slot="start" Size="@IconSize.Size16" Filled=true />

                    </a>
                    <a href="#" @onclick=DeleteReplyOnClick>
                        <FluentIcon Name="@FluentIcons.Delete" Slot="start" Size="@IconSize.Size16" Filled=true />

                    </a>

                </div>
            </div>
        </div>
    }

    @*In case of an individual kudos, the image size is bigger*@
    @if (KudosItem.Receivers.Count == 1)
    {
        <div class="avatar">
            <img src=@KudosItem.Receivers[0].Photo style="height:10vh;width:10vh;float:left;border-radius: 50%" />
        </div>
    }

    <div class="info">

        <ul class="list-unstyled ">

            @*In case of an individual kudos, the name is also displayed*@
            @if (KudosItem.Receivers.Count == 1)
            {
                <li>
                    <h5>@KudosItem.Receivers[0].Name</h5>
                </li>
            }
            else
            {
                @*for multiple kudos, it's shown just the pictures for better visualization*@
                foreach (var receiver in KudosItem.Receivers)
                {
                    <li>
                        <div class="small55" id=@("receiver_" + receiver.Id.ToString())>
                            <img src=@receiver.Photo
                                    style="height: 5vh;width: 5vh;border-radius: 50%;margin-top:1vh;margin-left:1vw;margin-right:1vw" />
                            <small style="display:block; text-align:center">@receiver.GivenName</small>
                            </div>

                        <FluentTooltip Anchor=@("receiver_" + receiver.Id.ToString()) Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>
                            <span style="margin-left:5px">@receiver.Name</span>                                    
                        </FluentTooltip>
                    </li>
                }
            }
                        
            <li>
                <div class="text-wrap small55" style="width: 100%;margin-top:1vh">
                    @if (KudosItem.Receivers.Count == 1)
                    {
                    <small class="card-title pricing-card-title">@Localizer["Received"] @Localizer["A"] <spam style="font-weight: bold">@KudosItem.Title.ToUpper()</spam> </small>
                    }
                    else
                    {
                        <small class="card-title pricing-card-title">@Localizer["Received_Plural"] @Localizer["A"] <spam style="font-weight: bold">@KudosItem.Title.ToUpper()</spam> </small>
                    }
                                
                </div>
            </li>
            
            <li>
                <div class="small55">
                    <small style="margin-right:5px;">@Localizer["SentBy"]:</small>
                    <img src=@KudosItem.From.Photo
                         style="height: 26px;width: 26px;border-radius: 50%" />
                    <small style="margin-left:5px;font-weight: bold">@KudosItem.From.Name</small>
                </div>

            </li>
        
            <li>
                <div class="small55" >
                    <small style="margin-right:5px">@Localizer["SentOn"]:</small>

                    <small style="margin-left:5px">@KudosItem.SendOn</small>
                </div>

            </li>
        </ul>
    </div>

    <div class="card-body small55" style="width:100%;padding: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);">

        <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;min-width:200px;min-height:40px;margin-right:3vw;margin-top:1vh">
            <small>@KudosItem.Message</small>
        </div>

        <div style="float:right">

            <FluentButton style="margin-left:20px;" @onclick=@(()=>ReplyKudos(KudosItem))>
                <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />
                <div>
                    @KudosItem.Comments.Count()
                </div>
            </FluentButton>

            <FluentButton id=@KudosItem.Id.ToString() style="margin-left:20px;" @onclick=@(()=>LikeKudosClick(KudosItem))
                          Disabled=@LikeDisabled(KudosItem.Id)>
             
                <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                            Filled=@Filled(KudosItem) />

                <div @ref=numberOfLikes[KudosItem.Id] id=@($"likevalue_{KudosItem.Id}")>
                    @KudosItem.Likes.Count()
                </div>

            </FluentButton>

            <FluentTooltip Anchor=@KudosItem.Id.ToString() Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>

                @if (KudosItem.Likes.Count() > 0)
                            {
                                <ul class="list-unstyled ">
                        @foreach (var like in KudosItem.Likes)
                                    {
                                        <li>
                                            <div>
                                                <img src=@((like.Photo.Contains("data")) ? like.Photo : $"data:image /png;base64,{like.Photo}")
                                                     style="height: 26px;width: 26px;border-radius: 50%;" />
                                                <span style="margin-left:5px">@like.Name</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }

                        </FluentTooltip>

                    </div>

                </div>
            </div>

@code {

    
    [Parameter]
    public UserProfile User { get; set; }

    [Parameter]
    public KudosResponse KudosItem { get; set; }

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public SendKudosCallBack SendLikeCallBack { get; set; }

    [Parameter]
    public SendKudosCallBack SendUndoLikeCallBack { get; set; }

    public delegate void SendKudosCallBack(int pKudosId, Guid pFromPersonId);

    private Dictionary<int, bool> _disabledButtons;

    private readonly object _lock = new object();


    private Dictionary<int, ElementReference> numberOfLikes = new();


    private void EditReplyOnClick()
    {

    }

    private void DeleteReplyOnClick()
    {

    }

    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.UserProfileId);
        }

        return filled;
    }

    private async Task ReplyKudos(KudosResponse kudos)
    {

        ReplyCallBack?.Invoke(kudos);
        await Task.CompletedTask;
    }

    private bool LikeDisabled(int kudosId)
    {
        bool disabled = false;

        if (_disabledButtons.ContainsKey(kudosId))
        {
            disabled = _disabledButtons[kudosId];
        }
        else
        {
            _disabledButtons.Add(kudosId, false);
        }


        return disabled;
    }

    private void UpdateDisabledLike(int kudosId, bool disabled)
    {
        var t = InvokeAsync(() =>
        {
            if (_disabledButtons.ContainsKey(kudosId))
            {
                _disabledButtons[kudosId] = disabled;
            }
            else
            {
                _disabledButtons.Add(kudosId, disabled);
            }


        });

        t.Wait();

    }

    private void LikeKudosClick(KudosResponse item)
    {

        lock (_lock)
        {
            if (LikeDisabled(item.Id))
                return;

            //disable button to avoid user click twice
            UpdateDisabledLike(item.Id, true);
        }

        var t = InvokeAsync(() =>
        {
            // I am populating the object LikeGateway to add the Like locally for the current user,
            // for better performance.
            // To call the API to update the like we just need the KudosId and UserProfileId

            var requestLike = new LikeGateway
                                (
                                    KudosId: item.Id,
                                    FromPerson: new Person
                                    {
                                        Id = User.UserProfileId,
                                        Name = User.DisplayName,
                                        Photo = User.Photo96x96
                                    }
                                );



            if (KudosItem.Likes.Any(l => l.Id == User.UserProfileId))
            {

                SendUndoLikeCallBack?.Invoke(item.Id, User.UserProfileId);

                UpdateLikesAsync(requestLike, false); // To remove a like

            }
            else
            {

                SendLikeCallBack?.Invoke(item.Id, User.UserProfileId);

                UpdateLikesAsync(requestLike, true); // To add a like
            }

        });

        t.Wait();

    }

    public void UpdateLikesAsync(LikeGateway pLike, bool addLike)
    {
        // Enable like button
        UpdateDisabledLike(pLike.KudosId, false);

        var like = KudosItem.Likes.FirstOrDefault(l => l.Id == pLike.FromPerson.Id);

        if (addLike && like == null)
        {
            KudosItem.Likes.Add(new Person()
                {
                    Id = pLike.FromPerson.Id,
                    Name = pLike.FromPerson.Name,
                    Photo = pLike.FromPerson.Photo
                });
        }
        else if (!addLike && like != null)
        {
            KudosItem.Likes.Remove(like);
        }

       // await InvokeAsync(StateHasChanged);

      var t = InvokeAsync(() =>
      {
          StateHasChanged();


      });

      t.Wait();

    }

    // public void UpdateUndoLikesCountAndToolTip(LikeGateway pLike)
    // {
    //     // enable like button
    //     UpdateDisabledLike(pLike.KudosId, false);

    //     var like = KudosItem.Likes.Where(l => l.Id == pLike.FromPerson.Id).FirstOrDefault();

    //     //remove the like in case it doesn't exist
    //     var t = InvokeAsync(() =>{

    //         if (KudosItem.Likes.Contains(like))
    //         {
    //             KudosItem.Likes.Remove(like);

    //             StateHasChanged();
    //         }
    //    });

    //     t.Wait();


    // }
    // public void UpdateLikesCountAndToolTip(LikeGateway pLike)
    // {
    //     // enable like button
    //     UpdateDisabledLike(pLike.KudosId, false);

    //     var t = InvokeAsync(() =>
    //     {

    //         //add the like in case it doesn't exist
    //         if (!KudosItem.Likes.Where(l => l.Id == pLike.FromPerson.Id).Any())
    //         {

    //             KudosItem.Likes.Add(new Person()
    //             {
    //                 Id = pLike.FromPerson.Id,
    //                 Name = pLike.FromPerson.Name,
    //                 Photo = pLike.FromPerson.Photo
    //             });

    //             StateHasChanged();
    //         }

    //     });

    //     t.Wait();

    // }

}
