@using Microsoft.Extensions.Localization
@using System.Globalization
@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Common

@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@inject KudosCommonVariables CommonVariables;

<style>
    /* Style The Dropdown Button */
    .dropbtn {
        margin-top: 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

    /* The container Div - needed to position the dropdown content */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    /* Dropdown Content (Hidden by Default) */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 16px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 5px 10px;
            text-decoration: none;
            display: block;
        }

            /* Change color of dropdown links on hover */
            .dropdown-content a:hover {
                background-color: #f1f1f1
            }

    /* Show the dropdown menu on hover */
    .dropdown:hover .dropdown-content {
        display: block;
    }

    /* Change the background color of the dropdown button when the dropdown content is shown */
    .dropdown:hover .dropbtn {
    }

    .horizontal-list-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 10px; /* Adjust the margin as needed */
    }
</style>


@* <div id="confetti-container" ></div> *@

<div class="profile" data-is-focusable="true" style="clear: both;width:100%;z-index:auto">


    @* if the kudos was sent by the current user, the user can edit or delete it *@

    @if (CanEditOrDelete())
    {
        <div style="float:right;">

            <div class="dropdown" style="margin-top: 5px;padding: 0px;width:100%;">
                <button class="dropbtn" style="margin-top: 0px;background:white;align-content:end">
                    <span style="font-stretch:extra-expanded;font-weight: bold;font-size:x-large">...</span>
                </button>
                <div class="dropdown-content">
                    <a href="#" @onclick=EditKudosOnClick>
                        <FluentIcon Name="@FluentIcons.Edit" Slot="start" Size="@IconSize.Size16" Filled=true />

                    </a>
                    <a href="#" @onclick=DeleteKudosOnClick>
                        <FluentIcon Name="@FluentIcons.Delete" Slot="start" Size="@IconSize.Size16" Filled=true />

                    </a>

                </div>
            </div>
        </div>
    }

    @*In case of an individual kudos, the image size is bigger*@
    @if (KudosItem.Receivers.Count == 1)
    {
        <div style="display: grid; grid-template-columns: 1fr 8fr ">
            <div class="info" style="float:left">
                <img src=@KudosItem.Receivers[0].Photo style="height:7vh;width:7vh;float:left;border-radius: 50%" />
            </div>

            <div >
                <h5 style="grid-column: 1 / span 3;margin-top:1vh;padding-left:10px">@KudosItem.Receivers[0].Name</h5>
            </div>
        </div>

    }


    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr;">
            @*In case of an individual kudos, the name is also displayed*@
            @if (KudosItem.Receivers.Count > 1)            
            {
                @*for multiple kudos, it's shown just the pictures for better visualization*@
                foreach (var receiver in KudosItem.Receivers)
                {
                    
                        <div class="small55" id=@("receiver_" + receiver.Id.ToString())>
                            <img src=@receiver.Photo

                                    style="height: 7vh;width: 7vh;border-radius: 50%;margin-top:1vh;margin-left:1vw;margin-right:1vw" />
                            <small style="display:block; text-align:center">@receiver.GivenName</small>
                            <FluentTooltip Anchor=@("receiver_" + receiver.Id.ToString()) Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>
                                <span style="margin-left:5px">@receiver.Name</span>
                            </FluentTooltip>
                            </div>
                       
                    
                }
                
            }
        </div>

    <div class="info" style="width:94%;padding-left:8vh">

        
        
            
                <div class="text-wrap small55" style="width: 100%;margin-top:1vh">
                    @if (KudosItem.Receivers.Count == 1)
                    {
                        <small class="card-title pricing-card-title">@Localizer["Received"] @Localizer["A"] <spam style="font-weight: bold">@KudosItem.Title.ToUpper()</spam> </small>
                    }
                    else
                    {
                        <small class="card-title pricing-card-title">@Localizer["Received_Plural"] @Localizer["A"] <spam style="font-weight: bold">@KudosItem.Title.ToUpper()</spam> </small>
                    }

                </div>
            
       
                <div class="small55" style="width: 100%;margin-top:0.5vh">
                    <small style="margin-right:5px;">@Localizer["SentBy"]:</small>
                    <img src=@KudosItem.From.Photo
                         style="height: 26px;width: 26px;border-radius: 50%" />
                    <small style="margin-left:5px;font-weight: bold">@KudosItem.From.Name</small>
                </div>

            

            
                <div class="small55">
                    <small style="margin-right:5px">@Localizer["SentOn"]:</small>

                    <small style="margin-left:5px">@KudosItem.SendOn</small>
                </div>

            
       
    </div>

    <div class="card-body small55" style="width:100%;padding: 0px;border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);">

        <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;width:100%;min-height:40px;margin-right:3vw;margin-top:1vh">
            @if (_isKudosReadOnly)
            {


                <small id=@($"textareareply_{@KudosItem.Id}")>@KudosItem.Message</small>

            }
            else
            {

                <textarea id=@($"textareareply_{@KudosItem.Id}") type="text" class="form-control"
                @onchange=KudosValueChanged>          
                    @KudosItem.Message
                        </textarea>



                <FluentButton style="margin-left:5px;padding-top: 0px;height: 28px;" @onclick=@(()=>SaveEditKudosClick())>
                    <FluentIcon Name="@FluentIcons.Save" Slot="start" Size="@IconSize.Size16" Filled=true />
                    Save Changes
                </FluentButton>

                <FluentButton style="margin-left:5px;padding-top: 0px;height: 28px;" @onclick=@(()=>CancelEditKudosClick())>
                    <FluentIcon Name="@FluentIcons.Dismiss" Slot="start" Size="@IconSize.Size16" Filled=true />
                    Cancel
                </FluentButton>
            }

        </div>

        <div style="float:right;margin:2vh">

            <FluentButton style="margin-left:20px;" @onclick=@(()=>ReplyKudos(KudosItem))>
                <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />
                <div>
                    @KudosItem.Comments.Count()
                </div>
            </FluentButton>

            <FluentButton id=@KudosItem.Id.ToString() style="margin-left:20px;" @onclick=@(()=>LikeKudosClick(KudosItem))
                          Disabled=@_isLikeButtonDisabled>

                <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                            Filled=@Filled(KudosItem) />

                <div @ref=numberOfLikes[KudosItem.Id] id=@($"likevalue_{KudosItem.Id}")>
                    @KudosItem.Likes.Count()
                </div>

            </FluentButton>

            <FluentTooltip Anchor=@KudosItem.Id.ToString() Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>

                @if (KudosItem.Likes.Count() > 0)
                {
                    <ul class="list-unstyled ">
                        @foreach (var like in KudosItem.Likes)
                        {
                            <li>
                                <div>
                                    <img src=@((like.Photo.Contains("data")) ? like.Photo : $"data:image /png;base64,{like.Photo}")
                                         style="height: 26px;width: 26px;border-radius: 50%;" />
                                    <span style="margin-left:5px">@like.Name</span>
                                </div>
                            </li>
                        }
                    </ul>
                }

            </FluentTooltip>

        </div>

    </div>


</div>





@code {


    [Parameter]
    public KudosResponse KudosItem { get; set; }

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }
    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public SendLikeOrUndoCallBack SendLikeCallBack { get; set; }

    [Parameter]
    public SendLikeOrUndoCallBack SendUndoLikeCallBack { get; set; }

    public delegate void SendLikeOrUndoCallBack(int pKudosId, Guid pFromPersonId);


    [Parameter]
    public UpdateKudosCallBack UpdateKudosSentCallBack { get; set; }

    public delegate void UpdateKudosCallBack(KudosResponse Kudos);

    [Parameter]
    public DeleteKudosCallBack DeleteKudosSentCallBack { get; set; }

    public delegate void DeleteKudosCallBack(int KudosId);

    [Parameter]
    public int CanEditOrDeleteKudosInDays { get; set; }

    private bool _isLikeButtonDisabled;
    private bool _isKudosReadOnly = true;

    private readonly object _lock = new object();

    private string _newKudosMessage;
    private string _originalMessage;

    private Dictionary<int, ElementReference> numberOfLikes = new();

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // Attach a listener to the textarea for input changes
    //         await JSRuntime.InvokeVoidAsync("attachTextareaListener", $"textareareply_{@KudosItem.Id}",
    //                                         DotNetObjectReference.Create(this));
    //     }
    // }

    // [JSInvokable]
    // public async Task PlayConfettiAnimation()
    // {
    //     // Trigger the JavaScript function to create the explosion-like confetti
    //     await JSRuntime.InvokeVoidAsync("triggerConfettiExplosion");
    // }

    private void EditKudosOnClick()
    {
        _isKudosReadOnly = false;
        _originalMessage = KudosItem.Message;

    }

    private void DeleteKudosOnClick()
    {
        DeleteKudosSentCallBack?.Invoke(KudosItem.Id);
    }

    private bool CanEditOrDelete()
    {
        return ( (KudosItem.From.Id == CommonVariables.User.UserProfileId) &&
                  DateTime.Now.Subtract(KudosItem.SendOn).Days <= CanEditOrDeleteKudosInDays ) 
                 || (CommonVariables.User.IsAdmin);

    }

    private void KudosValueChanged(ChangeEventArgs args)
    {
        _newKudosMessage = args.Value.ToString();
    }

    private void CancelEditKudosClick()
    {
        var t = InvokeAsync(() =>
                  {

                      JSRuntime.InvokeVoidAsync("updateReplyMessage", $"textareareply_{@KudosItem.Id}", _originalMessage);

                      KudosItem.Message = _originalMessage;
                      _isKudosReadOnly = true;

                      StateHasChanged();
                  });

        t.Wait();
    }


    private void SaveEditKudosClick()
    {
        _isKudosReadOnly = true;

        KudosItem.Message = _newKudosMessage;

        UpdateKudosSentCallBack?.Invoke(KudosItem);
    }

    private bool Filled(KudosResponse item)
    {
        bool filled = false;

        if (CommonVariables.User != null)
        {
            filled = item.Likes.Any(l => l.Id == CommonVariables.User.UserProfileId);
        }

        return filled;
    }

    private async Task ReplyKudos(KudosResponse kudos)
    {

        ReplyCallBack?.Invoke(kudos);
        await Task.CompletedTask;
    }



    private void LikeKudosClick(KudosResponse item)
    {

        lock (_lock)
        {
            if (_isLikeButtonDisabled)
                return;

            //disable button to avoid user click twice
            _isLikeButtonDisabled = true;
        }

        var t = InvokeAsync((Action)(() =>
        {
            // I am populating the object LikeGateway to add the Like locally for the current user,
            // for better performance.
            // To call the API to update the like we just need the KudosId and UserProfileId

            var requestLike = new LikeGateway
                                (
                                    KudosId: item.Id,
                                    FromPerson: new Person
                                        {
                                            Id = CommonVariables.User.UserProfileId,
                                            Name = CommonVariables.User.DisplayName,
                                            Photo = CommonVariables.User.Photo96x96
                                        }
                                );



            if (KudosItem.Likes.Any(l => l.Id == CommonVariables.User.UserProfileId))
            {

                SendUndoLikeCallBack?.Invoke(item.Id, CommonVariables.User.UserProfileId);

                UpdateLikesAsync(requestLike, false); // To remove a like

            }
            else
            {

                this.SendLikeCallBack?.Invoke(item.Id, CommonVariables.User.UserProfileId);

                UpdateLikesAsync(requestLike, true); // To add a like
            }

        }));

        t.Wait();

    }

    public void UpdateLikesAsync(LikeGateway pLike, bool addLike)
    {
        // Enable like button
        _isLikeButtonDisabled = false;

        var like = KudosItem.Likes.FirstOrDefault(l => l.Id == pLike.FromPerson.Id);

        if (addLike && like == null)
        {
            KudosItem.Likes.Add(new Person()
                {
                    Id = pLike.FromPerson.Id,
                    Name = pLike.FromPerson.Name,
                    Photo = pLike.FromPerson.Photo
                });
        }
        else if (!addLike && like != null)
        {
            KudosItem.Likes.Remove(like);
        }

        // await InvokeAsync(StateHasChanged);

        var t = InvokeAsync(() =>
        {
            StateHasChanged();


        });

        t.Wait();

    }



}
