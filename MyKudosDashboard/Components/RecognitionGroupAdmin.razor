@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces.Aggregator;
@using Microsoft.AspNetCore.Hosting

@inject IJSRuntime JSRuntime
@inject IRecognitionGroupAggregator _recognitionGroupAggregator;
@inject IWebHostEnvironment Environment

<h1>Recognition Groups</h1>

<div class="container">
    <!-- Display a form for adding/editing recognition groups -->
    <form @onsubmit="SaveGroup">
        <div class="form-group">
            <label for="description">Description:</label>
            <input class="form-control" id="description" @bind="currentGroup.Description" />
        </div>
        <div class="form-group">
            <label for="badgeName" >Badge Name:</label>

            
            <input @ref=fileInput
                class="form-control" id="badgeName" type="file" 
                   bind=GetImagePath(currentGroup.BadgeName)
                   @onchange=PreviewImage />

            @if (!string.IsNullOrEmpty(currentGroup.BadgeName))
            {
                <img @ref=previewImage src=@GetImagePath(currentGroup.BadgeName) alt=@currentGroup.BadgeName
                     style="height:60px;width:60px;margin-top:10px" />
            }
            
        </div>
        <div class="form-group">
            <label for="emoji">Emoji:</label>
            <input class="form-control" id="emoji" @bind="currentGroup.Emoji" />
        </div>
        <button type="submit" class="btn btn-success">Save</button>
    </form>

    <!-- Display a list of recognition groups -->
    <table class="table">
        <!-- Table headers -->
        <thead>
            <tr>
                <th>Description</th>
                <th>Badge Name</th>
                <th>Emoji</th>
                <th>Actions</th>
            </tr>
        </thead>
        <!-- Table data -->
        <tbody>
            @foreach (var group in recognitionGroups)
            {
                <tr>
                    <td>@group.Description</td>
                    <td>
                        <img src=@GetImagePath(group.BadgeName) style="height:40px;width:40px" alt=@group.BadgeName />
                    </td>
                    <td>@group.Emoji</td>
                    <td>
                        <button class="btn btn-primary" @onclick=@(()=>EditGroup(group))>Edit</button>
                        <button class="btn btn-danger" @onclick=@(()=>DeleteGroup(group))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    
</div>

@code {

    private List<RecognitionGroup> recognitionGroups = new();
    private RecognitionGroup currentGroup = new RecognitionGroup();

    private ElementReference fileInput;
    private ElementReference previewImage;

    private string newImagePath;


    protected override async Task OnInitializedAsync()
    {
        
        var result = await _recognitionGroupAggregator.GetRecognitionGroups();

        recognitionGroups = result.ToList();
    }

    private void EditGroup(RecognitionGroup group)
    {
        // Populate the form with the selected group for editing
        currentGroup = group;
    }

    private async Task SaveGroup()
    {
        
        currentGroup.BadgeName = System.IO.Path.GetFileName(newImagePath); 

        if (currentGroup.RecognitionGroupId == 0)
        {   
            // Add new group
            await _recognitionGroupAggregator.AddNewRecognitionGroup(currentGroup);
        }
        else
        {
            // Update existing group
            await _recognitionGroupAggregator.UpdateRecognitionGroup(currentGroup);
        }

        await UploadImage();

        ClearForm();
    }

    private async Task DeleteGroup(RecognitionGroup group)
    {
        await _recognitionGroupAggregator.DeleteRecognitionGroup(group.RecognitionGroupId);
        recognitionGroups.Remove(group);
    }



    private async Task UploadImage()
    {
        //no change was made
        if (string.IsNullOrEmpty(newImagePath))
            return;

        
    }



    private async Task PreviewImage(ChangeEventArgs e)
    {
        //I will just upload the image after saving it
        //but I need to keep it
        newImagePath = e.Value as string;

       

        await JSRuntime.InvokeVoidAsync("readURL", previewImage, fileInput);
    }

    private string GetImagePath(string badgeName)
    {
        return $"/images/badges/{badgeName}";
    }

    private void ClearForm()
    {
        currentGroup = new RecognitionGroup();
    }
}
