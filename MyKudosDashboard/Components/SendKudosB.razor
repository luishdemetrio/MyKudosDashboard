@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ISendKudosView SendKudosView;
@inject IJSRuntime JSRuntime;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer

@inject IJSRuntime JsRuntime

  <!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg">Large modal</button>

<!-- Modal -->
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">👏 @Localizer["SendKudosToPeople"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
                    <table class="table">
                        <tbody>
                            <tr>
                                <td scope="row">

                                    <p style="margin-bottom: 5px;">@Localizer["SelectColleague"]</p>

                                    <BlazoredTypeahead SearchMethod="@SearchEmployees"
                                                       @bind-Value="@SelectedEmployee"
                                                       Debounce="500" style="witdh:80px">
                                        <SelectedTemplate>
                                            @if (string.IsNullOrEmpty(context.Photo))
                                            {
                                                <span style="margin-left:5px">@context.Name</span>
                                            }
                                            else
                                            {
                                                <div>
                                                    <img src=@context.Photo
                                                         style="height: 26px;width: 26px;border-radius: 50%" />
                                                    <span style="margin-left:5px">@context.Name</span>
                                                </div>
                                            }


                                        </SelectedTemplate>
                                        <ResultTemplate>
                                            @if (string.IsNullOrEmpty(context.Photo))
                                            {
                                                <span style="margin-left:5px">@context.Name</span>
                                            }
                                            else
                                            {
                                                <div>
                                                    <img src=@context.Photo
                                                         style="height: 26px;width: 26px;border-radius: 50%;" />
                                                    <span style="margin-left:5px">@context.Name</span>
                                                </div>
                                            }
                                        </ResultTemplate>
                                        <NotFoundTemplate>
                                            @Localizer["SorryNoResultsFound"]
                                        </NotFoundTemplate>
                                    </BlazoredTypeahead>


                                </td>

                            </tr>
                            <tr>
                                <td scope="row">

                                    <p style="margin-bottom: 5px;">@Localizer["Category"]</p>

                                    @if (recognitions != null)
                                    {
                                      

                                        <div id="myCarousel" class="carousel carousel-dark slide" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;">
                                            <div class="carousel-inner" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;">


                                                @for (int i = 0; i < recognitions.Count(); i++)
                                                {

                                                    <div id=@recognitions.ElementAt(i).Id class="@(i == 0 ? "carousel-item active" : "carousel-item")"
                                                         style="padding-left: 0px;padding-right: 0px;">

                                                        <div class="bd-placeholder-img bd-placeholder-img-lg d-block w-100">

                                                            <div class="@(recognitions.ElementAt(i).IsSelected ? "card border border-primary " : "card ")"
                                                                 style="width:600px;height: 120px;">

                                                                <div style="padding:0px;padding-top:2px;font-family:'Segoe UI';font-size:small;overflow-wrap: break-word;"
                                                                    >



                                                                    <h5 style="float: left;padding-top:2px;padding-left:0px;text-align:center;width:100%">
                                                                        @recognitions.ElementAt(i).Emoji @recognitions.ElementAt(i).Title
                                                                    </h5>

                                                                <span class="btn stretched-link" style="float: left;padding-top:2px;padding-left:0px;font-size:medium;text-align:center;width:100%;overflow-wrap: break-word;">@recognitions.ElementAt(i).Description</span>


                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>


                                                }

                               

                                            </div>
                                            <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
                                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                <span class="visually-hidden">Previous</span>
                                            </button>
                                            <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
                                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                <span class="visually-hidden">Next</span>
                                            </button>
                                        </div>
                                    }
                                </td>

                            </tr>

                            <tr>
                                <td scope="row">

                                    <p style="margin-bottom: 5px;">@Localizer["Message"]</p>

                                    <div class="input-group">

                                        <textarea class="form-control" aria-label="With textarea" style="height:160px"
                                                  @onchange="KudosMessageChanged" value=@KudosMessage />


                                    </div>

                                </td>

                            </tr>

                            <tr>

                                <td scope="row">

                                    @if (isLoading)
                                    {
                                        <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>

                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            📩 @Localizer["Send"]
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary" style="margin-left: 20px" @onclick=@(()=>SendKudosClick() ) disabled=@btnSendKudosDisabled>
                                            📩 @Localizer["Send"]
                                        </button>
                                    }


                                    @*<button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=@(()=>Hide() )>✖️ Cancel</button>*@

                                </td>

                            </tr>

                        </tbody>
                    </table>


            </div>
           
        </div>
    </div>
</div>

@code{

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public UserInfo UserProfile { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    private bool isLoading = false;
    private bool btnSendKudosDisabled = false;

    private IEnumerable<RecognitionViewModel> recognitions;

    private UserViewModel SelectedEmployee { get; set; }

    private string KudosMessage;

    public delegate void SendKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public SendKudosCallBack sendKudosCallBack { get; set; }

   // private FluentDialog SendKudosFluentDialog;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        recognitions = await SendKudosView.GetRecognitionsAsync();



    }

    private async Task<string> GetActiveSlide()
    {
        var activeElement = await JsRuntime.InvokeAsync<ElementReference>("eval", "$('.carousel-item.active')[0]");

        var index = await JsRuntime.InvokeAsync<string>("jQuery", activeElement);

        //        var index = await JsRuntime.InvokeAsync<int>("jQuery", activeElement).InvokeAsync<int>("index", CancellationToken.None);
        return index;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);

    //    if (firstRender && recognitions == null)
    //    {

    //        recognitions = await SendKudosView.GetRecognitionsAsync();

    //    }
    //}


    public async Task SendKudosModal()
    {

        //sendKudosCallBack = pSendKudosCallBack;

        KudosMessage = string.Empty;

        //await InvokeAsync(() =>
        //{
        SelectedEmployee = null;

        ModalHidden = false;
        KudosMessage = string.Empty;

        await InvokeAsync(StateHasChanged);

        await Task.CompletedTask;
        //});
    }

    private void RecognitionClick(RecognitionViewModel recognition)
    {
        foreach (var item in recognitions)
        {
            item.IsSelected = false;
        }

        recognition.IsSelected = !recognition.IsSelected;

    }

    private Task<IEnumerable<UserViewModel>> SearchEmployees(string searchText)
    {
        return SendKudosView.GetUsersAsync(searchText);

    }

    private void KudosMessageChanged(ChangeEventArgs args)
    {
        KudosMessage = args.Value.ToString();
    }


    private void BlockSendButton(bool block)
    {
        isLoading = block;
        btnSendKudosDisabled = block;

    }

    private async Task SendKudosClick()
    {
        string kudosId = string.Empty;

        KudosRequest kudos = null;

        var t = Task.Run(() =>
        {
            var recognition = recognitions.Where(r => r.IsSelected).FirstOrDefault();

            if (recognition == null || SelectedEmployee == null || string.IsNullOrEmpty(KudosMessage))
            {
                JSRuntime.InvokeVoidAsync("alert", "Please inform all fields!");

                return;
            }

            BlockSendButton(true);

            InvokeAsync(() => StateHasChanged());

            kudos = new(
                    From: new Person()
                        {
                            Id = UserProfile.ObjectId,
                            Name = UserProfile.DisplayName,
                            Photo = UserPhoto
                        },
                    To: new Person()
                        {
                            Id = SelectedEmployee.Id,
                            Name = SelectedEmployee.Name,
                            Photo = SelectedEmployee.Photo
                        },
                    Reward: new Reward(
                        Id: recognition.Id,
                        Title: recognition.Title
                    ),
                    Message: KudosMessage,
                    SendOn: DateTime.Now
                );





        });

        await t;

        if (kudos == null)
            return;

        kudosId = await SendKudosView.Send(kudos);


        if (t.IsCompleted && !string.IsNullOrEmpty(kudosId))
        {

            await InvokeAsync(() =>
             {
                 BlockSendButton(false);
                 ClearFields();
                 Hide();
                 StateHasChanged();
             });


        }

    }

    private void ClearFields()
    {

    }



    public void Hide()
    {
        ModalHidden = true;
        //SendKudosFluentDialog!.Hide();



    }

    private void OnDismiss()
    {
        Hide();
    }
}