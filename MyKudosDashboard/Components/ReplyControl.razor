@using SuperKudos.Aggregator.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using Microsoft.Fast.Components.FluentUI

@inject IReplyView ReplyView
@inject IJSRuntime JSRuntime


<style>
/* Style The Dropdown Button */
.dropbtn {
  margin-top: 20px;
  font-size: 16px;
  border: none;
  cursor: pointer;
}

/* The container Div - needed to position the dropdown content */
.dropdown {
  position: relative;
  display: inline-block;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 16px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
  color: black;
  padding: 5px 10px;
  text-decoration: none;
  display: block;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #f1f1f1}

/* Show the dropdown menu on hover */
.dropdown:hover .dropdown-content {
  display: block;
}

/* Change the background color of the dropdown button when the dropdown content is shown */
.dropdown:hover .dropbtn {
  
}
</style>

<div style="width:100%;padding-bottom: 0px">

    <div style="height: auto;width:100%">
        <div style="width:50px;margin-top:0px;padding-top: 5px">
            <img src=@Reply.FromPerson.Photo style="height:40px;width:40px;float:left;border-radius: 50%" />
        </div>

        <div style="width:90%;margin-bottom: 0px;">

       
            <div class="form-group small55" style="background-color:#e9ecef;margin-bottom: 0px; display:inline-block;height:auto;overflow-x:hidden;width:90%">
                <small for="formGroupExampleInput2">@Reply.FromPerson.Name</small>
                <textarea id=@($"textareareply_{@Reply.Id}") type ="text" class="form-control"
                          Readonly=@_isReplyCommendReadOnly
                          style="margin-left:1px;margin-top:0px;width:100%;border:none;background-color:#e9ecef; overflow-y:auto"
                          @onchange=PostValueChanged>          
                    @Reply.Message
                </textarea>
            
            </div>

            @if (CanEditOrDeleteComment())
            {


                <div class="dropdown" style="margin-top: 0px;padding: 0px">
                    <button class="dropbtn" style="margin-top: 0px;">
                        ...
                    </button>
                    <div class="dropdown-content">
                        <a href="#" @onclick=EditReplyOnClick>
                            <FluentIcon Name="@FluentIcons.Edit" Slot="start" Size="@IconSize.Size16" Filled=true />
                    
                        </a>
                        <a href="#" @onclick=DeleteReplyOnClick>
                            <FluentIcon Name="@FluentIcons.Delete" Slot="start" Size="@IconSize.Size16" Filled=true />
                    
                        </a>
                
                    </div>
                </div>

            }


        </div>

    </div>
</div>

<div style="float:left;margin-left:37px;padding-top: 0px">

    <FluentButton   id=@($"reply_{@Reply.Id}") style="margin-left:20px;padding-top: 0px;height: 28px;" 
                    @onclick=@(()=>LikeCommentClick(Reply))
                  Disabled=@_isLikeButtonDisabled>
        <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                    Filled=@FilledLikeComments(@Reply) />
        <div @ref=_numberOfLikeComments>@Reply.Likes.Count()</div>
        
    </FluentButton>

    <FluentTooltip Anchor=@($"reply_{Reply.Id}") Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>

     
        @if (Reply.Likes.Count() > 0)
        {
            <ul class="list-unstyled ">
                @foreach (var like in Reply.Likes)
                {
                    <li>
                        <div>
                            <img src=@like.Photo
                                 style="height: 26px;width: 26px;border-radius: 50%;" />
                            <span style="margin-left:5px">@like.Name</span>
                        </div>
                    </li>
                }
            </ul>
        }
    </FluentTooltip>



    @if(_isReplyCommendReadOnly == false)
    {
        <FluentButton style="margin-left:5px;padding-top: 0px;height: 28px;" @onclick=@(()=>SaveEditMessageClick())>
            <FluentIcon Name="@FluentIcons.Save" Slot="start" Size="@IconSize.Size16" Filled=true />
            Save Changes
        </FluentButton>

        <FluentButton style="margin-left:5px;padding-top: 0px;height: 28px;" @onclick=@(()=>CancelEditMessageClick())>
            <FluentIcon Name="@FluentIcons.Dismiss" Slot="start" Size="@IconSize.Size16" Filled=true />
            Cancel
        </FluentButton>
    }

</div>


@code {

    [Parameter]
    public string ReplyUserPhoto { get; set; }

    [Parameter]
    public CommentsResponse Reply { get; set; }

    [Parameter]
    public UserInfo ReplyUser { get; set; }

    public delegate void DeleteCommentCallBack(CommentsResponse comments);

    [Parameter]
    public DeleteCommentCallBack replyDeleteCommentCallBack { get; set; }

    public delegate void UpdateCommentCallBack(CommentsResponse comments);

    [Parameter]
    public UpdateCommentCallBack replyUpdateCommentCallBack { get; set; }

    private bool _isReplyCommendReadOnly=true;

    private string _originalMessage;
    private string _updatedComment;
    
    private ElementReference _numberOfLikeComments;
    private Dictionary<string, ElementReference> tooltipLikes = new();

    private bool _isLikeButtonDisabled = false;

   
    private bool FilledLikeComment(KudosResponse item)
    {
        bool filled = false;

        @if (ReplyUser != null)
        {
            filled = item.Likes.Any(l => l.Id.ToString() == ReplyUser.ObjectId);
        }

        return filled;
    }
    private bool LikeDisabled(CommentsResponse item)
    {
        return item.FromPerson.Id.ToString() == ReplyUser.ObjectId;
    }

    private bool CanEditOrDeleteComment()
    {
        return (Reply.FromPerson.Id.ToString() == ReplyUser.ObjectId);
    }

    private bool FilledLikeComments(CommentsResponse item)
    {
        bool filled = false;

        @if (ReplyUser != null)
        {
            filled = item.Likes.Any(l => l.Id.ToString() == ReplyUser.ObjectId);
        }

        return filled;
    }

    private  void LikeCommentClick(CommentsResponse item)
    {

        if (_isLikeButtonDisabled)
            return;


        try
        {

            if (item.Likes.Any(l => l.Id.ToString() == ReplyUser.ObjectId))
            {
                var t = InvokeAsync(() =>
                  {
                      ReplyView.SendUndoLikeAsync(
                              new LikeCommentGateway(
                                 KudosId: item.Id,
                                 FromPerson: new Person
                                  {
                                      Id = new Guid(ReplyUser.ObjectId),
                                      Name = ReplyUser.DisplayName,
                                      Photo = ReplyUserPhoto
                                  }));
                  });
                t.Wait();

            }
            else
            {
                var t = InvokeAsync(() =>
                  {

                      ReplyView.SendLikeAsync(
                              new LikeCommentGateway(
                                KudosId: item.Id,
                                FromPerson: new Person
                                {
                                    Id = new Guid(ReplyUser.ObjectId),
                                    Name = ReplyUser.DisplayName,
                                    Photo = ReplyUserPhoto
                                }));
                  });
                t.Wait();
            }

            UpdateLikes(item.Id, new Guid(ReplyUser.ObjectId));

        }
        finally
        {
            _isLikeButtonDisabled = false;

            var t = InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });

            t.Wait();
        }

    }

    private void UpdateLikes(int commentId, Guid personId)
    {

        if (Reply.Id == commentId)
        {
            var like = Reply.Likes.Where(k => k.Id == personId).FirstOrDefault();


            if ((like is null) || (!Reply.Likes.Contains(like)))
            {

                Reply.Likes.Add(new Person()
                    {
                        Id = personId,
                        Name = ReplyUser.DisplayName,
                        Photo = ReplyUserPhoto
                    });
            }
            else
            {
                Reply.Likes.Remove(like);
            }

        }
    }


    private void EditReplyOnClick()
    {

        _isReplyCommendReadOnly = false;

        _originalMessage = Reply.Message;

    }

    private void DeleteReplyOnClick()
    {
        replyDeleteCommentCallBack?.Invoke(Reply);
    }

    private void CancelEditMessageClick()
    {
        var t = InvokeAsync(() =>
                  {

                      JSRuntime.InvokeVoidAsync("updateReplyMessage", $"textareareply_{@Reply.Id}", _originalMessage);

                      Reply.Message = _originalMessage;
                      _isReplyCommendReadOnly = true;

                      StateHasChanged();
                  });

        t.Wait();
    }


    private void SaveEditMessageClick()
    {
        _isReplyCommendReadOnly = true;

        Reply.Message = _updatedComment;

        replyUpdateCommentCallBack?.Invoke(Reply);
    }

    private void PostValueChanged(ChangeEventArgs args)
    {
        _updatedComment = args.Value.ToString();
    }
}
