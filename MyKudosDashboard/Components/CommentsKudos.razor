@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ICommentsView CommentsView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer

@inject IJSRuntime JSRuntime

<FluentDialog @ref=_replyKudosFluentDialog
                aria-label="Simple dialog" Modal="true"
              class="both-gradient" style="--dialog-height: 95vh;--dialog-width: calc(40vw + 180px);"
                Hidden=@ModalHidden
                >

    <button style="float:right;padding-right:5px" type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick=@(() => CloseClick())>
            <span aria-hidden="true">&times;</span>
        </button>

    <div class="list-group list-group-checkable d-grid gap-1 border-0 " style="height: 92%;overflow-y:scroll;margin:5px;width:98%;">

       

        @if (_item != null)
        {
            <table class="table" style="width:98%;margin:5px">
            <tbody>
                    <tr style="height:80px">
                        <td scope="row" style="padding-top: 0px;padding-bottom: 0px;width:98%;">


                            <div class="profile" data-is-focusable="true" style="width:90%">


                                @*In case of an individual kudos, the image size is bigger*@
                                @if (_item.Receivers.Count == 1)
                                {
                                    <div class="avatar" >
                                        <img src=@_item.Receivers[0].Photo style="height:10vh;width:10vh;float:left;border-radius: 50%;" />
                                    </div>
                                }


                                <div class="info" style="width:@(_item.Receivers.Count == 1 ? "70%" : "98%");padding-left:1vw">


                                    <ul class="list-unstyled " style="padding-top: 0px;padding-bottom: 0px;float:left">

                                        @*In case of an individual kudos, the name is displayed*@
                                        @if (_item.Receivers.Count == 1)
                                        {
                                            <li>
                                                <h5>@_item.Receivers[0].Name</h5>
                                            </li>
                                        }
                                        else
                                        {
                                            @*for multiple kudos, it's shown just the pictures*@
                                            foreach (var receiver in _item.Receivers)
                                            {
                                                <div class="small55" id=@("receiver_" + receiver.Id.ToString())>
                                                    <img src=@receiver.Photo
                                                         style="height: 6vh;width: 6vh;border-radius: 50%;margin-top:1vh;margin-left:1vw;margin-right:1vw" />
                                                    <small style="display:block; text-align:center">@receiver.GivenName</small>
                                                </div>

                                                <FluentTooltip Anchor=@("receiver_" + receiver.Id.ToString()) Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Top>

                                                    <span style="margin-left:5px">@receiver.Name</span>


                                                </FluentTooltip>
                                            
                                            }
                                        }

                                    <li>
                                            <div class="text-wrap small55" style="width: 100%;margin-top:1vh">
                                                @if (_item.Receivers.Count == 1)
                                                {
                                                    <a class="card-title pricing-card-title">@Localizer["Received"] @Localizer["A"] <spam style="font-weight: bold">@_item.Title.ToUpper()</spam> </a>
                                                }
                                                else
                                                {
                                                    <a class="card-title pricing-card-title">@Localizer["Received_Plural"] @Localizer["A"] <spam style="font-weight: bold">@_item.Title.ToUpper()</spam> </a>
                                                }

                                               
                                        </div>
                                    </li>
                                    <li>
                                        <div class="small55">
                                            <a style="margin-right:5px">@Localizer["SentBy"]:</a>
                                            <img src=@_item.From.Photo
                                                 style="height: 26px;width: 26px;border-radius: 50%" />
                                            <a style="margin-left:5px;font-weight: bold">@_item.From.Name</a>
                                         
                                        </div>
                                 

                                    </li>
                                        <li>
                                            <div class="small55">
                                                <a style="margin-right:5px">@Localizer["SentOn"]:</a>

                                                <a style="margin-left:5px">@_item.SendOn</a>
                                            </div>

                                        </li>
                                 
                                </ul>
                            </div>
                        </div>
                            <div class="text-wrap small55" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;width:98%">
                                <a>@_item.Message</a>
                            </div>

                            <div style="float:right">


                                <FluentButton style="margin-left:20px;">
                                    <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />
                                    <div @ref=_numberOfComments>@_item.Comments.Count()</div>

                                </FluentButton>

                                <FluentButton   id=@($"Details_{_item.Id}") style="margin-left:20px;margin-right:20px"
                                                @onclick=@(()=>LikeKudosClick(_item))
                                                Disabled=@_isLikeButtonDisabled>

                                    <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                                            Filled=@FilledLikeKudos(_item) />
                                    @_item.Likes.Count()
                                </FluentButton>

                                <FluentTooltip Anchor=@($"Details_{_item.Id}") Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Bottom>

                                    @if (_item.Likes.Count() > 0)
                                    {
                                        <ul class="list-unstyled ">
                                            @foreach (var like in _item.Likes)
                                            {
                                                <li>
                                                    <div>
                                                        <img src=@((like.Photo.Contains("data")) ? like.Photo : $"data:image /png;base64,{like.Photo}")
                                                             style="height: 26px;width: 26px;border-radius: 50%;" />
                                                        <span style="margin-left:5px">@like.Name</span>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </FluentTooltip>

                            </div>

                    </td>

                </tr>
           
                    <tr>

                        <td scope="row" >


                            <div style="display: flex;padding-bottom: 0px;width:90%">
                                <div style="width:50px;margin-top:5px;padding-top: 15px">
                                    <img src=@((User.Photo96x96.Contains("data")) ? User.Photo96x96 : $"data:image /png;base64,{User.Photo96x96}") style="height:40px;width:40px;float:left;border-radius: 50%" />
                                </div>

                                <div class="form-group small55" style="width:90%">
                                    <a for="formGroupExampleInput2">@User.DisplayName</a>
                                    <input type="text" class="form-control" id="formGroupExampleInput2" style="margin-left:1px;margin-top:5px;width:100%" placeholder="Another input" onchange=@PostValueChanged value=@_replyMessage>
                                </div>
                              
                            </div>

                            
                            <FluentButton class="small55" style="margin-left:60px;padding-top: 0px;height: 28px;" @onclick=@(()=>PostMessageClick()) disabled=@btnSendKudosDisabled>
                                <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=true />
                                @Localizer["Post"]
                                </FluentButton>
                          
                        </td>

                    </tr>

                    @if (_comments.Count() > 0)
                    {

                        <tr>

                            <td scope="row">


                                <div style="width:100%">

                                    <ul class="list-unstyled ">

                                        @foreach (var comment in _comments)
                                        {

                                            <li>

                                                <ReplyControl Reply=@comment ReplyUser=@User 
                                                  replyDeleteCommentCallBack=@DeleteComment
                                                  replyUpdateCommentCallBack=@UpdateCommentCallBack />
                                               

                                            </li>
                                        }
                                    </ul>
                                </div>

                            </td>

                        </tr>
                    }

                 
                </tbody>
            </table>

          
        }

           
    </div>

</FluentDialog>



@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public UserProfile User { get; set; }


    private KudosResponse _item { get; set; }

    private FluentDialog _replyKudosFluentDialog;

    private string _replyMessage;

    private List<CommentsResponse> _comments = new();

    private bool _showReply;

    private ElementReference _numberOfComments;

    private bool isLoading = false;
    private bool btnSendKudosDisabled = false;

    private bool _isLikeButtonDisabled = false;


    public void ShowModal(KudosResponse kudos)
    {

        _item = kudos;
        
        ModalHidden = false;
        _comments = new();

        CommentsView.GetComments(_item.Id).ContinueWith(t =>
        {
            _comments = t.Result.ToList();
            InvokeAsync(StateHasChanged);
        });

        BlockSendButton(false);
        InvokeAsync(StateHasChanged);

    }

    public void CloseClick()
    {
        ModalHidden = true;
        _replyKudosFluentDialog!.Hide();

    }

    private void OnDismiss(EventArgs args)
    {

        ModalHidden = true;

        _replyKudosFluentDialog!.Hide();

    }

  


    private bool FilledLikeKudos(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id== User.UserProfileId);
        }

        return filled;
    }


    private void LikeKudosClick(KudosResponse kudos)
    {
        if (_isLikeButtonDisabled)
            return;


        try
        {


            _isLikeButtonDisabled = true;


            if (kudos.Likes.Any(l => l.Id == User.UserProfileId))
            {
                var t = InvokeAsync(() =>
                   {
                       CommentsView.UndoLikeKudosAsync(
                         new LikeGateway(
                           KudosId: kudos.Id,
                           FromPerson: new Person
                              {
                                  Id = User.UserProfileId,
                                  Name = User.DisplayName,
                                  Photo = User.Photo96x96
                              }
                       )
                   );
                   });

                t.Wait();


            }
            else
            {

                var t = InvokeAsync(() =>
                   {
                       CommentsView.LikeKudosAsync(
                           new LikeGateway(
                             KudosId: kudos.Id,
                             FromPerson: new Person
                             {
                                 Id = User.UserProfileId,
                                 Name = User.DisplayName,
                                 Photo = User.Photo96x96
                             }
                            ));
                   });

                t.Wait();

            }

            UpdateLikesKudos(kudos.Id, User.UserProfileId);

        }
        finally { 

            _isLikeButtonDisabled = false; 

            var t = InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });

            t.Wait();
        }
    }


    private void UpdateLikeCallback(LikeGateway like)
    {
        // The person who sent already has the like updated
        if (like.FromPerson.Id == User.UserProfileId)
            return;

        UpdateLikesKudos(like.KudosId, like.FromPerson.Id);
    }

    private void UpdateLikesKudos(int pKudosId, Guid personId)
    {        

        if (_item.Id == pKudosId)
        {
            var like = _item.Likes.Where(k =>  k.Id == personId).FirstOrDefault();


            if ((like is null) || (!_item.Likes.Contains(like)))
            {

                _item.Likes.Add(new Person()
                    {
                        Id = personId,
                        Name = User.DisplayName,
                        Photo = (User.Photo96x96.Contains("data")) ? User.Photo96x96 : $"data:image/png;base64,{User.Photo96x96}"
                    });
            }
            else
            {
                _item.Likes.Remove(like);
            }
        }
    }



    private void PostValueChanged(ChangeEventArgs args)
    {
        _replyMessage = args.Value.ToString();
    }

    private void BlockSendButton(bool block)
    {
        isLoading = block;
        btnSendKudosDisabled = block;

    }

    private async Task PostMessageClick()
    {

        if (string.IsNullOrEmpty(_replyMessage))
            return;



        BlockSendButton(true);

        await InvokeAsync(StateHasChanged);

        var comment = await CommentsView.SendComments(
                         new CommentsRequest()
                             {
                                 KudosId = _item.Id,
                                 FromPersonId = User.UserProfileId,
                                 Message = _replyMessage,
                                 Date = DateTime.Now
                             }
                      );


        _comments.Add(new CommentsResponse()
            {
                Id = comment,
                KudosId = _item.Id,
                FromPerson = new Person()
                {
                    Id = User.UserProfileId,
                    Photo = (User.Photo96x96.Contains("data")) ? User.Photo96x96 : $"data:image/png;base64,{User.Photo96x96}",
                    Name = User.DisplayName
                },
                Message = _replyMessage,

                Date = DateTime.Now
            });

        _replyMessage = string.Empty;



        await UpdateNumberOfComments();

        BlockSendButton(false);

        await InvokeAsync(StateHasChanged);

        await Task.CompletedTask;

    }


    public async Task UpdateNumberOfComments()
    {

        if (_comments != null)
        {            
            await JSRuntime.InvokeVoidAsync(
               "updateCount", _numberOfComments, _comments.Count);

        }

    }

    private void ReplyMessageClick()
    {
        _showReply = !_showReply;
    }

    public void DeleteComment(CommentsResponse pComments)
    {

        var t = InvokeAsync(() =>
                     {
                         CommentsView.DeleteComments(pComments);

                     });

        t.Wait();


        var comments = _comments.First(c => c.Id == pComments.Id);

        if (_comments.Contains(comments))
            _comments.Remove(comments);

        var t2 = InvokeAsync(() =>
                {
                    UpdateNumberOfComments();

                    });

        t.Wait();

        StateHasChanged();
    }

    public void UpdateCommentCallBack(CommentsResponse comments)
    {
        CommentsView.UpdateComments(comments);

       
    }


}
