@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject ICommentsView CommentsView;

<FluentDialog @ref=_replyKudosFluentDialog
                TrapFocus="true" aria-label="Simple dialog" Modal="true"
                class="both-gradient"  style="--dialog-height: 600px;--dialog-width: 620px;"
                Hidden=@ModalHidden
                @ondismiss=OnDismiss>

    <div class="list-group list-group-checkable d-grid gap-1 border-0 " style="height:68.7vh;overflow-y:scroll;margin:5px;width:600px;">

    
        @if (_item != null)
        {
            <table class="table" style="width:580px;margin:5px">
            <tbody>
                <tr>
                        <td scope="row" style="padding-top: 0px;padding-bottom: 0px;">
                      
                       
                         <div class="profile" data-is-focusable="true">

                            <div class="avatar">
                                <img src=@_item.To.Photo style="height:80px;width:80px;float:left;border-radius: 50%" />
                            </div>

                            <div class="info">

                                    <ul class="list-unstyled " style="padding-top: 0px;padding-bottom: 0px;">
                                    <li>
                                        <h5>@_item.To.Name</h5>
                                    </li>

                                    <li>
                                        <div class="text-wrap" style="width: 16rem;">
                                            <spam class="card-title pricing-card-title">received a <spam style="font-weight: bold">@_item.Title.ToUpper()</spam> kudos</spam>
                                        </div>
                                    </li>
                                    <li>
                                        <div>
                                            <span style="margin-right:5px">Sent by</span>
                                            <img src=@_item.From.Photo
                                                 style="height: 26px;width: 26px;border-radius: 50%" />
                                            <span style="margin-left:5px;font-weight: bold">@_item.From.Name</span>

                                                <span style="margin-left:5px">on:</span>

                                                <span style="margin-left:5px">@_item.SendOn</span>
                                        </div>

                                    </li>
                                  @*  <li>
                                        <div>
                                            <span style="margin-right:5px">Sent on:</span>

                                            <span style="margin-left:5px">@_item.SendOn</span>
                                        </div>

                                    </li>*@
                                </ul>
                            </div>
                        </div>          

                    </td>

                </tr>
                    <tr>
                        <td scope="row">

                            <div class="text-wrap" style="padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;width:580px">
                                @_item.Message
                            </div>

                            <div style="float:right">


                                <FluentButton style="margin-left:20px;">
                                    <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=false />
                                    @_item.Comments.Count()
                                </FluentButton>

                                <FluentButton id=@($"Details_{_item.Id}") style="margin-left:20px;margin-right:20px" @onclick=@(()=>LikeKudos(_item.Id, _item.To.Id))>
                                    <FluentIcon Name="@FluentIcons.Heart" Slot="start" Size="@IconSize.Size16"
                                            Filled=@FilledLikeKudos(_item) />
                                    @_item.Likes.Count()
                                </FluentButton>

                                <FluentTooltip Anchor=@($"Details_{_item.Id}") Position=Microsoft.Fast.Components.FluentUI.TooltipPosition.Bottom>

                                    @if (_item.Likes.Count() > 0)
                                    {
                                        <ul class="list-unstyled ">
                                            @foreach (var like in _item.Likes)
                                            {
                                                <li>
                                                    <div>
                                                        <img src=@like.Photo
                                                             style="height: 26px;width: 26px;border-radius: 50%;" />
                                                        <span style="margin-left:5px">@like.Name</span>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </FluentTooltip>

                            </div>
                           
                        </td>

                    </tr>

                    
                    <tr>

                        <td scope="row">


                            <div style="display: flex;padding-bottom: 0px;">
                                <div style="width:50px;margin-top:5px;;padding-top: 15px">
                                    <img src=@UserPhoto style="height:40px;width:40px;float:left;border-radius: 50%" />
                                </div>

                                <div style="width:520px;">
                                    <FluentTextArea style="margin-left:1px;margin-top:5px;width:100%" Resize="TextAreaResize.Vertical" onchange=@PostValueChanged   />
                                </div>
                            </div>

                            <FluentButton style="margin-left:60px;padding-top: 0px;height: 28px;" @onclick=@(()=>PostMessageClick())>
                                <FluentIcon Name="@FluentIcons.Comment" Slot="start" Size="@IconSize.Size16" Filled=true />
                                Post
                            </FluentButton>
                        </td>

                    </tr>

                    @if (_comments.Count() > 0)
                    {

                        <tr>

                            <td scope="row">


                                <div style="display: flex;">

                                    <ul class="list-unstyled ">

                                        @foreach (var comment in _comments)
                                        {

                                            <li>

                                                <ReplyControl Comment=@comment User=User UserPhoto=UserPhoto/>

                                                @*<div style="float:left;margin-left:37px">

                                                <ReplyControl Comment=@comment User=User UserPhoto=UserPhoto />

                                            </div>*@

                                            </li>
                                        }
                                    </ul>
                                </div>

                            </td>

                        </tr>
                    }

                     <tr>

                        <td scope="row">

                            <button type="button" class="btn btn-secondary" style="margin-left: 20px" @onclick=@(()=>CloseClick() )>✖️ Cancel</button>
                        </td>

                    </tr>
                </tbody>
            </table>

          
        }

           
    </div>

</FluentDialog>



@code {

    [Parameter]
    public bool ModalHidden { get; set; } = true;

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }


    private KudosResponse _item { get; set; }

    private FluentDialog _replyKudosFluentDialog;

    private string _replyMessage;


    private List<CommentsResponse> _comments = new();

    private bool _showReply;

    public void ShowModal(KudosResponse kudos)
    {

        _item = kudos;

    
        ModalHidden = false;

        CommentsView.GetComments(_item.Id).ContinueWith(t =>
        {
            _comments = t.Result.ToList();
            InvokeAsync(StateHasChanged);
        });

        
        InvokeAsync(StateHasChanged);
        
    }

    public void CloseClick()
    {
        ModalHidden = true;
        _replyKudosFluentDialog!.Hide();
            
    }

    private void OnDismiss(EventArgs args)
    {
       
            ModalHidden = true;
            
            _replyKudosFluentDialog!.Hide();
       
    }


    private bool FilledLikeKudos(KudosResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.ObjectId);
        }

        return filled;
    }

    private bool FilledLikeComments(CommentsResponse item)
    {
        bool filled = false;

        @if (User != null)
        {
            filled = item.Likes.Any(l => l.Id == User.ObjectId);
        }

        return filled;
    }


    private async void LikeKudos(string kudosId, string toPersonId)
    {

        UpdateLikes(kudosId, User.ObjectId);

        await CommentsView.SendLikeAsync(
                    new Like(
                        KudosId: kudosId,
                        FromPersonId: User.ObjectId,
                        ToPersonId: toPersonId
                    )
                );


    }

    private async void LikeComment(string commentId, string toPersonId)
    {

        UpdateLikes(commentId, User.ObjectId);

    }

    private void UpdateLikeCallback(Like like)
    {
        // The person who sent already has the like updated
        if (like.FromPersonId == User.ObjectId)
            return;

        UpdateLikes(like.KudosId, like.FromPersonId);
    }

    private void UpdateLikes(string commentId, string personId)
    {        

        if (_item.Id == commentId)
        {
            var like = _item.Likes.Where(k => k.Id == personId).FirstOrDefault();


            if ((like is null) || (!_item.Likes.Contains(like)))
            {

                _item.Likes.Add(new Person()
                    {
                        Id = personId,
                        Name = User.DisplayName,
                        Photo = UserPhoto
                    });
            }
            else
            {
                _item.Likes.Remove(like);
            }
        }
    }



    private void PostValueChanged(ChangeEventArgs args)
    {
        _replyMessage = args.Value.ToString();
    }

    private void PostMessageClick()
    {

        if (string.IsNullOrEmpty(_replyMessage))
            return;

        CommentsView.SendComments(
                        new CommentsRequest()
                        {
                            KudosId = _item.Id,
                            FromPersonId = User.ObjectId,
                            Message = _replyMessage,
                            Date = DateTime.Now
                        }
                     ).ContinueWith(c =>
                     {
                         _comments.Add(
                             new CommentsResponse()
                            {
                                Id = c.Result,
                                KudosId = _item.Id,
                                FromPerson = new Person()
                                {
                                    Id = User.ObjectId,
                                    Photo = UserPhoto,
                                    Name = User.DisplayName
                                },
                                Message = _replyMessage,

                                Date = DateTime.Now
                            });
                     });


    }

    private void ReplyMessageClick()
    {
        _showReply = !_showReply;
    }

}
