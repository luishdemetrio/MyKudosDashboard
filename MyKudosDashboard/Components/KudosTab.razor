@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using System.Collections.Concurrent

@inject IKudosTabView KudosTabView;
@inject ILogger<KudosTab> Logger;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer


<div class="card-body " style="padding:2px">



    <FluentTabs style="z-index:auto">
        <FluentTab Text=@Localizer["All"] style=";z-index:auto" />
        <FluentTab Text=@Localizer["KudosToMe"] style=";z-index:auto" />
        <FluentTab Text=@Localizer["KudosFromMe"] style=";z-index:auto" />

            <FluentTabPanel >
                <KudosList @ref=AllKudosTab TypeTab=KudosList.KudosTypeTab.All User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos   />
            </FluentTabPanel>
            
            <FluentTabPanel >
                <KudosList TypeTab=KudosList.KudosTypeTab.ToMe User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
            
            <FluentTabPanel >
                <KudosList TypeTab=KudosList.KudosTypeTab.FromMe User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>      

    </FluentTabs>

</div>

@code {

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }


    
    private readonly object _lock = new object();

    private KudosList AllKudosTab;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();


        if (User != null)
        {
            var subscriptionName = User.ObjectId ;

            
            //KudosTabView.RegisterForLiveUpdates(User.ObjectId);

            KudosTabView.LikeCallback = UpdateLikesCallBack;
            KudosTabView.UndoLikeCallback = UpdateUndoLikesCallBack;
            KudosTabView.KudosCallback = UpdateKudosCallback;
            KudosTabView.CommentsDeletedCallback = CommentsDeleted;
            KudosTabView.CommentsSentCallback = CommentsSent;

        }

        await Task.CompletedTask;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }



    public void  CommentsDeleted(CommentsRequest pComments)
    {

         AllKudosTab.CommentsDeleted(pComments);
        
    }

    public void CommentsSent(CommentsRequest pComments)
    {

        AllKudosTab.CommentsSent(pComments);

    }



    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }

  

    public void UpdateKudosCallback(KudosResponse pKudos)
    {

        AllKudosTab.UpdateKudos(pKudos);

    }


    public void UpdateLikesCallBack(LikeGateway pLike)
    {

         AllKudosTab.UpdateLikesCallBack(pLike);

    }

    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {

        AllKudosTab.UpdateUndoLikesCallBack(pLike);

    }

}
