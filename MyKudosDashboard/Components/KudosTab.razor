@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IKudosTabView KudosTabView;

<div class="card-body ">



    <FluentTabs>
        <FluentTab Text="All"/>
        <FluentTab Text="Kudos to me" />
        <FluentTab Text="Kudos from me" />

        @if (_kudosList != null)
        {
            <FluentTabPanel>
                <KudosList kudos=@GetAllKudos() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos  />
            </FluentTabPanel>
            <FluentTabPanel>
                <KudosList kudos=@GetKudosToMe() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
            <FluentTabPanel>
                <KudosList kudos=@GetKudosFromMe() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
        }

    </FluentTabs>

</div>

@code {

    [Parameter]
    public IEnumerable<KudosResponse> kudos { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    private List<KudosResponse> _kudosList;

    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (User != null && firstRender)
        {
            KudosTabView.RegisterForLiveUpdates(User.ObjectId);
            KudosTabView.LikeCallback = UpdateLikesCallBack;
            KudosTabView.KudosCallback = UpdateKudosCallback;

            LoadKudos();

        }
       
    }

    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }

    private void LoadKudos()
    {
        KudosTabView.GetKudos().ContinueWith(t =>
           {
               _kudosList = t.Result.ToList();

               InvokeAsync(StateHasChanged);
           });
    }

    private IEnumerable<KudosResponse> GetAllKudos()
    {
        return _kudosList.OrderByDescending(k => k.SendOn);
    }

    private IEnumerable<KudosResponse> GetKudosToMe()
    {
        return _kudosList.Where(k => k.To.Id == User.ObjectId).OrderByDescending(k => k.SendOn);
    }

    private IEnumerable<KudosResponse> GetKudosFromMe()
    {
        return _kudosList.Where(k => k.From.Id == User.ObjectId).OrderByDescending(k => k.SendOn);
    }


    //public void SendCallBack(KudosResponse pKudos)
    //{
    //    _kudosList = new();
    //    _kudosList.Add(pKudos);

    //    //StateHasChanged();

    //    // _kudosList = (await WelcomeView.GetKudos().ConfigureAwait(false)).ToList();

    //    //await InvokeAsync(() =>
    //    //{
    //    //    StateHasChanged();
    //    //});

    //    LoadKudos();

    //}

    private void UpdateKudosCallback(KudosResponse pKudos)
    {

        if (_kudosList == null)
            return;

        var k = _kudosList.FirstOrDefault(k => k.Id == pKudos.Id);

        if (k == null)
        {
            _kudosList.Add(pKudos);
            
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateLikesCallBack(Like pLike)
    {

        // The person who sent already has the like updated
        if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
                return;

        
        var kudo = _kudosList.FirstOrDefault(k => k.Id == pLike.KudosId);

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == pLike.FromPerson.Id).FirstOrDefault();


            if ((like is null) || (!kudo.Likes.Contains(like)))
            {

                kudo.Likes.Add(new Person()
                    {
                        Id = pLike.FromPerson.Id,
                        Name = pLike.FromPerson.Name ,
                        Photo = pLike.FromPerson.Photo
                    });
            }
            else
            {
                kudo.Likes.Remove(like);
            }

            //Interlocked.Increment(ref _numberOfCallBack);
            //InvokeAsync(StateHasChanged);
            InvokeAsync(StateHasChanged);
        }
    }
}
