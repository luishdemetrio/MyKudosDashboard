@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using System.Collections.Concurrent

@inject IKudosTabView KudosTabView;
@inject ILogger<KudosTab> Logger;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer


<div class="card-body " style="padding:2px">



    <FluentTabs class="nav nav-tabs" style="z-index:auto">
        <FluentTab Text=@Localizer["All"] style="z-index:auto" @onclick=OnTabAllClick />
        <FluentTab Text=@Localizer["KudosToMe"] style="z-index:auto" @onclick=OnTabToMeClick />
        <FluentTab Text=@Localizer["KudosFromMe"] style="z-index:auto" @onclick=OnTabFromMeClick />
         @if (User.HasDirectReports)
         {
            <FluentTab Text=@Localizer["KudosToMyDirectReports"] style="z-index:auto" @onclick=OnTabToMyDirectReportsClick />
         }
        <FluentTabPanel class="nav-item">
                <KudosList @ref=AllKudosTab TypeTab=KudosList.KudosTypeTab.All User=@User  ReplyCallBack=@ReplyKudos   />
            </FluentTabPanel>
            
            <FluentTabPanel class="nav-item" >
            <KudosList @ref=ToMeKudosTab TypeTab =KudosList.KudosTypeTab.ToMe User=@User ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>

        <FluentTabPanel class="nav-item">
                <KudosList @ref=FromMeKudosTab TypeTab=KudosList.KudosTypeTab.FromMe User=@User  ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>   
            
            @if (User.HasDirectReports)
            {
            <FluentTabPanel class="nav-item">
                    <KudosList @ref=ToMyDirectReports TypeTab=KudosList.KudosTypeTab.ToMyDirectReports User=@User  ReplyCallBack=@ReplyKudos />
                </FluentTabPanel>
            }

    </FluentTabs>

</div>

@code {

    [Parameter]
    public UserProfile User { get; set; }

    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }

    private readonly object _lock = new object();

    private KudosList AllKudosTab;
    private KudosList ToMeKudosTab;
    private KudosList FromMeKudosTab;
    private KudosList ToMyDirectReports;



    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);


        if (User != null)
        {
            var subscriptionName = User.UserProfileId;


            KudosTabView.RegisterObserver(User.UserProfileId.ToString());

            KudosTabView.LikeCallback = UpdateLikesCallBack;
            KudosTabView.UndoLikeCallback = UpdateUndoLikesCallBack;

            KudosTabView.KudosCallback = UpdateKudosCallback;

            KudosTabView.CommentsDeletedCallback = CommentsDeleted;
            KudosTabView.CommentsSentCallback = CommentsSent;

            KudosTabView.KudosDeletedCallback = KudosDeleted;
            KudosTabView.KudosMessageUpdatedCallBack = KudosMessageUpdated;
        }

    }

    public void ReloadKudos()
    {
        var t = InvokeAsync(() =>
      {
          AllKudosTab.LoadKudos();
      });

        t.Wait();


    }

    private async Task OnTabAllClick(MouseEventArgs args)
    {
        await AllKudosTab.LoadKudos();
    }

    private async Task OnTabToMeClick(MouseEventArgs args)
    {
        await ToMeKudosTab.LoadKudos();
    }

    private async Task OnTabFromMeClick(MouseEventArgs args)
    {
        await FromMeKudosTab.LoadKudos();
    }

    private async Task OnTabToMyDirectReportsClick(MouseEventArgs args)
    {
        if (User.HasDirectReports)
        {
            await ToMyDirectReports.LoadKudos();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }



    public void  CommentsDeleted(CommentsRequest pComments)
    {

         AllKudosTab.CommentsDeleted(pComments);
        
    }

    public void CommentsSent(CommentsRequest pComments)
    {

        AllKudosTab.CommentsSent(pComments);

    }

    public void KudosDeleted(int kudosId)
    {

        AllKudosTab.KudosDeleted(kudosId);

    }

    public void KudosMessageUpdated(KudosMessage message)
    {

        AllKudosTab.KudosMessageUpdated(message);

    }

    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }

  

    public void UpdateKudosCallback(KudosResponse pKudos)
    {

        AllKudosTab.UpdateKudos(pKudos);

    }


    public void UpdateLikesCallBack(LikeGateway pLike)
    {

         AllKudosTab.UpdateLikesCallBack(pLike);

    }

    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {

        AllKudosTab.UpdateUndoLikesCallBack(pLike);

    }

}
