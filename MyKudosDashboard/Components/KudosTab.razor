@using Microsoft.Fast.Components.FluentUI
@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Common
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using System.Collections.Concurrent
@using Microsoft.Extensions.Localization
@using System.Globalization


@inject IKudosTabView KudosTabView;
@inject ILogger<KudosTab> Logger;

@inject IStringLocalizer<App> Localizer;
@inject KudosCommonVariables CommonVariables;

<div class="card-body " style="padding-left:1vh">

    <FluentTabs  style="z-index:auto;">

        @if (CommonVariables.ShowAllKudosTab)
        {
            <FluentTab style="z-index:auto" @onclick=OnTabAllClick >
                <Header>
                    @Localizer["All"]
                </Header>
                <Content>
                    <KudosList @ref=AllKudosTab TypeTab=KudosTypeTab.All ReplyCallBack=@ReplyKudos />
                </Content>
                
            </FluentTab>
        }
        
        <FluentTab  style="z-index:auto" @onclick=OnTabToMeClick >
            <Header>
                @Localizer["KudosToMe"]
            </Header>
            <Content>
                <KudosList @ref=ToMeKudosTab TypeTab=KudosTypeTab.ToMe ReplyCallBack=@ReplyKudos />
            </Content>
        </FluentTab>

        <FluentTab style="z-index:auto" @onclick=OnTabFromMeClick >
            <Header>
                @Localizer["KudosFromMe"]
            </Header>
            <Content>
                <KudosList @ref=FromMeKudosTab TypeTab=KudosTypeTab.FromMe ReplyCallBack=@ReplyKudos />
            </Content>
            
        </FluentTab>


    </FluentTabs>

</div>

@code {


    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }

    private KudosList AllKudosTab;
    private KudosList ToMeKudosTab;
    private KudosList FromMeKudosTab;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (CommonVariables.ShowAllKudosTab)
                CommonVariables.KudosTypeTab = KudosTypeTab.All;
            else
                CommonVariables.KudosTypeTab = KudosTypeTab.ToMe;

        }

        if (CommonVariables.User != null)
        {
            var subscriptionName = CommonVariables.User.UserProfileId;

            KudosTabView.RegisterObserver(CommonVariables.User.UserProfileId.ToString());

            KudosTabView.LikeCallback = UpdateLikesCallBack;
            KudosTabView.UndoLikeCallback = UpdateUndoLikesCallBack;

            KudosTabView.KudosCallback = UpdateKudosCallback;

            KudosTabView.CommentsDeletedCallback = CommentsDeleted;
            KudosTabView.CommentsSentCallback = CommentsSent;

            KudosTabView.KudosDeletedCallback = KudosDeleted;
            KudosTabView.KudosMessageUpdatedCallBack = KudosMessageUpdated;

        }

    }

    /// <summary>
    /// This method is called by the Welcome.razor page after the SendKudos 
    /// </summary>
    public void ReloadKudos()
    {
        ExecuteKudosAction((tab) => _= tab.LoadKudos());     
    }


    /// <summary>
    /// This method is called by the Welcome.razor page after the user clicks on the visualize just my team option
    /// </summary>
    public async Task  LoadKudosAfterVisualizeJustMyTeamValueChanged()
    {
        await AllKudosTab.ReloadKudos();
    }

    public async Task<string> ExportToCSV()
    {
        return await AllKudosTab.ExportToCSV();
    }

    private async Task OnTabAllClick(MouseEventArgs args)
    {
        CommonVariables.KudosTypeTab = KudosTypeTab.All;
        await AllKudosTab.LoadKudos();
    }

    private async void LoadToMeKudos()
    {
        CommonVariables.KudosTypeTab = KudosTypeTab.ToMe;

        await ToMeKudosTab.LoadKudos();
    }

    private void OnTabToMeClick(MouseEventArgs args)
    {
        LoadToMeKudos();
    }

    private async Task OnTabFromMeClick(MouseEventArgs args)
    {
        CommonVariables.KudosTypeTab = KudosTypeTab.FromMe;

        await FromMeKudosTab.LoadKudos();
    }

    public void  CommentsDeleted(CommentsRequest pComments)
    {
        ExecuteKudosAction((tab) => tab.CommentsDeleted(pComments));        
    }

    public void CommentsSent(CommentsRequest pComments)
    {
        ExecuteKudosAction((tab) => tab.CommentsSent(pComments));
    }

    public void KudosDeleted(int kudosId)
    {
        ExecuteKudosAction((tab) => tab.KudosDeleted(kudosId));        
    }

    /// <summary>
    /// This method is called after a kudos message is updated
    /// </summary>
    /// <param name="message"></param>
    public void KudosMessageUpdated(KudosMessage message)
    {
        ExecuteKudosAction((tab) => tab.KudosMessageUpdated(message));
    }

    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }


    /// <summary>
    /// This method is called by event hub after a Kudos is sent
    /// </summary>
    /// <param name="pKudos"></param>
    public void UpdateKudosCallback(KudosResponse pKudos)
    {
        ExecuteKudosAction((tab) => tab.UpdateKudos(pKudos));
    }

    /// <summary>
    /// This method is called via Event Hub after a Like is sent
    /// </summary>
    /// <param name="pLike"></param>
    public void UpdateLikesCallBack(LikeGateway pLike)
    {
        ExecuteKudosAction((tab) => tab.UpdateLikesCallBack(pLike));
    }

    /// <summary>
    /// this method is called via events for undo like
    /// </summary>
    /// <param name="pLike"></param>
    public void UpdateUndoLikesCallBack(LikeGateway pLike)
    {
        ExecuteKudosAction((tab) => tab.UpdateUndoLikesCallBack(pLike));
    }

    private void ExecuteKudosAction(Action<KudosList> action)
    {
        switch (CommonVariables.KudosTypeTab)
        {
            case KudosTypeTab.All:
                action(AllKudosTab);
                break;

            case KudosTypeTab.FromMe:
                action(FromMeKudosTab);
                break;

            case KudosTypeTab.ToMe:
                action(ToMeKudosTab);
                break;
        }
    }

}
