@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using System.Collections.Concurrent

@inject IKudosTabView KudosTabView;
@inject ILogger<KudosTab> Logger;

<div class="card-body ">



    <FluentTabs>
        <FluentTab Text="All"/>
        <FluentTab Text="Kudos to me" />
        <FluentTab Text="Kudos from me" />

        @if (_kudosList != null)
        {
            <FluentTabPanel>
                <KudosList kudos=@GetAllKudos() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos  />
            </FluentTabPanel>
            <FluentTabPanel>
                <KudosList kudos=@GetKudosToMe() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
            <FluentTabPanel>
                <KudosList kudos=@GetKudosFromMe() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
        }

    </FluentTabs>

</div>

@code {

    [Parameter]
    public IEnumerable<KudosResponse> kudos { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    private ConcurrentQueue<KudosResponse> _kudosList;


    

    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }

    private readonly object _lock = new object();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        
        if (User != null)
        {
            KudosTabView.RegisterForLiveUpdates(User.ObjectId);

            KudosTabView.LikeCallback = UpdateLikesCallBack;
            KudosTabView.UndoLikeCallback = UpdateUndoLikesCallBack;
            KudosTabView.KudosCallback = UpdateKudosCallback;
            KudosTabView.CommentsDeletedCallback = CommentsDeleted;
            KudosTabView.CommentsSentCallback = CommentsSent;
        }

        await Task.CompletedTask;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {           
            await LoadKudos();
        }

        //  await Task.CompletedTask;
    }



    private async Task CommentsDeleted(CommentsRequest pComments)
    {
        if (_kudosList == null)
            return;


        var kudo = _kudosList.FirstOrDefault(k => k.Id == pComments.KudosId);

        if (kudo != null)
        {
            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();


            if ((comments != null) || (kudo.Comments.Contains(comments)))
            {
                kudo.Comments.Remove(comments);

                await InvokeAsync(StateHasChanged);
                await Task.Delay(300);
                Logger.LogInformation($"CommentsDeleted: KudosTab Updated : {pComments.Id}");
            }


        }
        else
        {
            await LoadKudos();
        }


        // await Task.CompletedTask;
    }

    private async Task CommentsSent(CommentsRequest pComments)
    {

        if (_kudosList == null) 
            return;



        var kudo = _kudosList.Where(k => k.Id == pComments.KudosId).FirstOrDefault();


        if (kudo != null)
        {
            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();


            if ((comments is null) || (!kudo.Comments.Contains(comments)))
            {

                kudo.Comments.Add(comments);

                await InvokeAsync(StateHasChanged);
                await Task.Delay(300);
                Logger.LogInformation($"CommentsSent: KudosTab Updated : {pComments.Id}");

            }


        }
        else
        {
            await LoadKudos();
        }




        //await Task.CompletedTask;
    }



    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }

    private async Task LoadKudos()
    {
        var kudos = await KudosTabView.GetKudos();

        _kudosList = new ConcurrentQueue<KudosResponse>(kudos); ;

        await InvokeAsync(StateHasChanged);
        await Task.Delay(300);
        // await Task.CompletedTask;
    }

    private IEnumerable<KudosResponse> GetAllKudos()
    {
        return _kudosList.OrderByDescending(k => k.SendOn);
    }

    private IEnumerable<KudosResponse> GetKudosToMe()
    {
        return _kudosList.Where(k => k.To.Id == User.ObjectId).OrderByDescending(k => k.SendOn);
    }

    private IEnumerable<KudosResponse> GetKudosFromMe()
    {
        return _kudosList.Where(k => k.From.Id == User.ObjectId).OrderByDescending(k => k.SendOn);
    }



    private async Task UpdateKudosCallback(KudosResponse pKudos)
    {

        if (_kudosList == null)
            return;


        var k = _kudosList.FirstOrDefault(k => k.Id == pKudos.Id);

        if (k == null)
        {
            _kudosList.Enqueue(pKudos);

            await InvokeAsync(StateHasChanged);
            await Task.Delay(300);
            Logger.LogInformation($"UpdateKudosCallback: KudosTab Updated : {pKudos.Id}");
        }



        //await Task.CompletedTask;
    }


    private async Task UpdateLikesCallBack(Like pLike)
    {

        // The person who sent already has the like updated
        if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        {
            await Task.CompletedTask;
            return;
        }

        var kudo = _kudosList.FirstOrDefault(k => k.Id == pLike.KudosId);

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == pLike.FromPerson.Id).FirstOrDefault();


            if ((like is null) || (!kudo.Likes.Contains(like)))
            {

                kudo.Likes.Add(new Person()
                    {
                        Id = pLike.FromPerson.Id,
                        Name = pLike.FromPerson.Name,
                        Photo = pLike.FromPerson.Photo
                    });

                await InvokeAsync(StateHasChanged);
                Logger.LogInformation($"UpdateLikesCallBack: KudosTab Updated : {pLike.KudosId}");
                await Task.Delay(300);


            }
        }
        else
        {
            //force to reload
            await LoadKudos();
        }



        //  await Task.CompletedTask;


    }

    private async Task UpdateUndoLikesCallBack(Like pLike)
    {

        // The person who sent already has the like updated
        if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
            return;

        var kudo = _kudosList.FirstOrDefault(k => k.Id == pLike.KudosId);

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == pLike.FromPerson.Id).FirstOrDefault();


            if ((like != null) || (kudo.Likes.Contains(like)))
            {
                kudo.Likes.Remove(like);

                await InvokeAsync(StateHasChanged);
                await Task.Delay(300);
                Logger.LogInformation($"UpdateUndoLikesCallBack: KudosTab Updated : {pLike.KudosId}");
            }


        }
        else
        {
            //force to reload
            await LoadKudos();
        }




        //await Task.CompletedTask;
    }
}
