@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using System.Collections.Concurrent

@inject IKudosTabView KudosTabView;
@inject ILogger<KudosTab> Logger;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer


<div class="card-body " style="padding:2px">



    <FluentTabs style="z-index:auto">
        <FluentTab Text=@Localizer["All"] style=";z-index:auto" />
        <FluentTab Text=@Localizer["KudosToMe"] style=";z-index:auto" />
        <FluentTab Text=@Localizer["KudosFromMe"] style=";z-index:auto" />

        @if (_kudosList != null)
        {
            <FluentTabPanel >
                <KudosList @ref=AllKudosTab kudos=@GetAllKudos() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos MoreKudosCallback=@LoadMoreKudosAll  />
            </FluentTabPanel>
            <FluentTabPanel >
                <KudosList kudos=@GetKudosToMe() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
            <FluentTabPanel >
                <KudosList kudos=@GetKudosFromMe() User=@User UserPhoto=@UserPhoto ReplyCallBack=@ReplyKudos />
            </FluentTabPanel>
        }

    </FluentTabs>

</div>

@code {

    //[Parameter]
    //public IEnumerable<KudosResponse> kudos { get; set; }

    [Parameter]
    public string UserPhoto { get; set; }

    [Parameter]
    public UserInfo User { get; set; }

    private ConcurrentQueue<KudosResponse> _kudosList;

    public delegate void ReplyKudosCallBack(KudosResponse pKudos);

    [Parameter]
    public ReplyKudosCallBack ReplyCallBack { get; set; }

    private readonly object _lock = new object();

    private int _pageNumber ;

    private KudosList AllKudosTab;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _pageNumber = 1;

        if (User != null)
        {
            KudosTabView.RegisterForLiveUpdates(User.ObjectId);

            KudosTabView.LikeCallback = UpdateLikesCallBack;
            KudosTabView.UndoLikeCallback = UpdateUndoLikesCallBack;
            KudosTabView.KudosCallback = UpdateKudosCallback;
            KudosTabView.CommentsDeletedCallback = CommentsDeleted;
            KudosTabView.CommentsSentCallback = CommentsSent;

        }

        await LoadKudos();

        //await Task.CompletedTask;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //if (firstRender)
        //{           
        //    await LoadKudos();
        //}

        //  await Task.CompletedTask;
    }



    private async Task CommentsDeleted(CommentsRequest pComments)
    {
        if (_kudosList == null)
        {
            await LoadKudos();
            return;
        }


        var kudo = _kudosList.FirstOrDefault(k => k.Id == pComments.KudosId);

        if (kudo != null)
        {
            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();


            if ((comments != null) || (kudo.Comments.Contains(comments)))
            {
                kudo.Comments.Remove(comments);

                await AllKudosTab.UpdateNumberOfComments(kudo.Id);

                //Logger.LogInformation($"CommentsDeleted: KudosTab Updated : {pComments.Id}");

                //await Task.Delay(500);
                //await InvokeAsync(StateHasChanged);
                //await Task.Delay(500);
            }


        }
        else
        {
            await LoadKudos();
        }


        // await Task.CompletedTask;
    }

    private async Task CommentsSent(CommentsRequest pComments)
    {

        if (_kudosList == null)
        {
            await LoadKudos();
            return;
        }


        var kudo = _kudosList.Where(k => k.Id == pComments.KudosId).FirstOrDefault();


        if (kudo != null)
        {
            var comments = kudo.Comments.Where(k => k == pComments.Id).FirstOrDefault();

            if ((comments is null) || (!kudo.Comments.Contains(comments)))
            {

                kudo.Comments.Add(comments);

                await AllKudosTab.UpdateNumberOfComments(kudo.Id);

                //Logger.LogInformation($"CommentsSent: KudosTab Updated : {pComments.Id}");

                //await Task.Delay(2000);
                //await InvokeAsync(StateHasChanged);
                //await Task.Delay(2000);

            }

        }
        else
        {
            await LoadKudos();
        }

    }



    private void ReplyKudos(KudosResponse kudos)
    {
        ReplyCallBack?.Invoke(kudos);
    }

    private async Task LoadKudos(int pageNumber =1)
    {
        var kudos = await KudosTabView.GetKudos(pageNumber).ConfigureAwait(false);

        if (kudos != null)
        {
            if (_kudosList == null)
            {
                _kudosList = new ConcurrentQueue<KudosResponse>(kudos); ;
            }
            else
            {
                foreach (var item in kudos)
                {
                    _kudosList.Enqueue(item);
                }

                //await Task.Delay(2000);
                //await InvokeAsync(StateHasChanged);
                //await Task.Delay(2000);
            }

            if (AllKudosTab != null)
            {
                foreach (var item in _kudosList)
                {
                    await AllKudosTab.UpdateNumberOfLikes(item.Id);
                }
            }

        }

    }

    private IEnumerable<KudosResponse> GetAllKudos()
    {
        return _kudosList.OrderByDescending(k => k.SendOn);
    }

    private IEnumerable<KudosResponse> GetKudosToMe()
    {
        return _kudosList.Where(k => k.To.Id == User.ObjectId).OrderByDescending(k => k.SendOn);
    }

    private IEnumerable<KudosResponse> GetKudosFromMe()
    {
        return _kudosList.Where(k => k.From.Id == User.ObjectId).OrderByDescending(k => k.SendOn);
    }

    private async Task UpdateKudosCallback(KudosResponse pKudos)
    {


        if (_kudosList == null)
        {
            await LoadKudos();
            return;
        }


        var k = _kudosList.FirstOrDefault(k => k.Id == pKudos.Id);

        if (k == null)
        {
            _kudosList.Enqueue(pKudos);

            Logger.LogInformation($"UpdateKudosCallback: KudosTab Updated : {pKudos.Id}");

            await Task.Delay(2000);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2000);

        }

    }


    private async Task UpdateLikesCallBack(Like pLike)
    {

        // The person who sent already has the like updated
        if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
        {
            await Task.CompletedTask;
            return;
        }

        var kudo = _kudosList.FirstOrDefault(k => k.Id == pLike.KudosId);

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == pLike.FromPerson.Id).FirstOrDefault();


            if ((like is null) || (!kudo.Likes.Contains(like)))
            {

                kudo.Likes.Add(new Person()
                    {
                        Id = pLike.FromPerson.Id,
                        Name = pLike.FromPerson.Name,
                        Photo = pLike.FromPerson.Photo
                    });

               await AllKudosTab.UpdateNumberOfLikes(kudo.Id);

               // Logger.LogInformation($"UpdateLikesCallBack: KudosTab Updated : {pLike.KudosId}");
            }

            //await Task.Delay(2000);
            //await InvokeAsync(StateHasChanged);
            //await Task.Delay(2000);
        }
        else
        {
            //force to reload
            await LoadKudos();
        }

        await Task.CompletedTask;


    }

    private async Task UpdateUndoLikesCallBack(Like pLike)
    {

        // The person who sent already has the like updated
        if ((_kudosList == null) || (pLike.FromPerson.Id == User.ObjectId))
            return;

        var kudo = _kudosList.FirstOrDefault(k => k.Id == pLike.KudosId);

        if (kudo != null)
        {
            var like = kudo.Likes.Where(k => k.Id == pLike.FromPerson.Id).FirstOrDefault();


            if ((like != null) || (kudo.Likes.Contains(like)))
            {
                kudo.Likes.Remove(like);

                //Logger.LogInformation($"UpdateUndoLikesCallBack: KudosTab Updated : {pLike.KudosId}");
                await AllKudosTab.UpdateNumberOfLikes(kudo.Id);
            }

            //await Task.Delay(2000);
            //await InvokeAsync(StateHasChanged);
            //await Task.Delay(2000);

        }
        else
        {
            //force to reload
            await LoadKudos();
        }

        //await Task.CompletedTask;
    }

  

    private async Task LoadMoreKudosAll()
    {
        _pageNumber++;

        await LoadKudos(_pageNumber);
    }
}
