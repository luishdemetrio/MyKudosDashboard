
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IUserProfileScoreView UserProfileScoreView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer

<div class="card-body" style="padding:2px">

    <div class="profile">
        <div class="avatar" style="float:none;align-content:center">
            <img src=@UserPhoto style="height:64px;width:64px;border-radius: 50%;" />
        </div>

        <div class="info">
            <h5 >@User.DisplayName</h5>

            @if (_isLoaded)
            {
                <h3 class="card-title pricing-card-title">
                    @_userScore.Score
                    <small class="text-muted fw-light"> @Localizer["Points"]</small>
                </h3>

           
                <div style="margin-left:10px">

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ArrowCircleRight" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.KudosSent</small>
                        <small class="text-muted fw-light"> @Localizer["KudosSent"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ArrowCircleLeft" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.KudosReceived</small>
                        <small class="text-muted fw-light"> @Localizer["KudosReceived"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ThumbLike" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.LikesSent</small>
                        <small class="text-muted fw-light"> @Localizer["LikesSent"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.Heart" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.LikesReceived</small>
                        <small class="text-muted fw-light"> @Localizer["LikesReceived"]</small>
                    </h5>

                     <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.CommentArrowLeft" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.MessagesSent</small>
                        <small class="text-muted fw-light"> @Localizer["CommentsSent"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.CommentArrowRight" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.MessagesReceived</small>
                        <small class="text-muted fw-light"> @Localizer["CommentsReceived"]</small>
                    </h5>

                </div>

                @if (_userScore.KudosSent + _userScore.KudosReceived > 0)
                {
                    <div style="clear:both;">
                        <p>@Localizer["Achievements"]</p>

                        
                        @if (_userScore.KudosSent >0)
                        {
                            <img src=@GetKudosSentBadge() style="height:80px;width:80px;padding:5px" />
                        }

                        @if(_userScore.KudosReceived >= 10)
                        {
                            <img src=@GetKudosReceivedBadge() style="height:80px;width:80px;padding:5px" />
                        }


                    </div>
                }
            }
            
        </div>

       

        


    </div>

</div>

@code {

    [Parameter]
    public string UserPhoto { get; set; }


    [Parameter]
    public UserInfo User { get; set; }

    private UserScore _userScore;

    private bool _isLoaded = false;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        UserProfileScoreView.RegisterForLiveUpdates(User.ObjectId);
        UserProfileScoreView.UserScoreCallback = UpdateScore;

        _userScore = await UserProfileScoreView.GetUserScore(User.ObjectId);

        if (_userScore == null)
            _userScore = new();

        _isLoaded = true;

        await InvokeAsync(StateHasChanged);
        //await Task.Delay(100);  
        //await Task.CompletedTask;
    }

    public async Task UpdateScore(UserScore userScore)
    {
        if(userScore.UserId == User.ObjectId)
        {
            _userScore = userScore;
            await InvokeAsync(StateHasChanged);
            //  await Task.Delay(100);  
        }


    }

    private string GetKudosSentBadge()
    {
        string result = string.Empty;

        switch (_userScore.KudosSent)
        {
            case var n when (n >= 1 && n <10):
                    result = "badges/1kudossent.png";
                    break;

            case var n when (n >= 10 && n <= 50):
                result = "badges/10kudossent.png";
                break;

            case var n when (n > 50 && n <= 100):
                result = "badges/50kudossent.png";
                break;

            case var n when (n > 100):
                result = "badges/100kudossent.png";
                break;
        }

        return result;
    }

    private string GetKudosReceivedBadge()
    {
        string result = string.Empty;

        switch (_userScore.KudosReceived)
        {
        
            case var n when (n >= 10 && n <= 50):
                result = "badges/10kudosreceived.png";
                break;

            case var n when (n > 50 && n <= 100):
                result = "badges/50kudosreceived.png";
                break;

            case var n when (n > 100):
                result = "badges/50kudosreceived.png";
                break;
        }

        return result;
    }

}
