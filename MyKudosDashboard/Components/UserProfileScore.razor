
@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IUserProfileScoreView UserProfileScoreView;

@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<App> Localizer

@inject IJSRuntime JSRuntime

<div class="card-body" style="padding:2px">

    <div class="profile" style="width:100%">

        <div class="avatar" style="float:none;width:100%;text-align: center">

            <img src=@UserPhoto style="height:64px;width:64px;border-radius: 50%;" />

            
        </div>

        <div class="info" style="width:100%">
            <h5 style="text-align: center;">@User.DisplayName</h5>

            @if (_isLoaded)
            {
                <div style="float:none;width:100%;text-align: center">
                    <h3 class="card-title pricing-card-title">
                        @*<div @ref=_score>@_userScore.Score</div>*@
                        <small @ref=_score style="margin-top:10px">@UserScoreValue.Score</small>
                        <small class="text-muted fw-light" style="margin-top:10px"> @Localizer["Points"]</small>
                    </h3>
                </div>

           
                <div style="margin-left:10px">

                    <h5 class="card-title pricing-card-title">

                        @*<FluentEmoji Name="@FluentEmojis.UpRightArrow" Size="@EmojiSize.Size32"  />*@
                        <FluentIcon Name="@FluentIcons.ArrowCircleRight" Filled=false  />

                        <small @ref=_kudosSent class="text-muted fw-light"> @UserScoreValue.KudosSent</small>
                        <small class="text-muted fw-light"> @Localizer["KudosSent"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ArrowCircleLeft" Filled=false  />

                        <small @ref=_kudosReceived class ="text-muted fw-light"> @UserScoreValue.KudosReceived</small>
                        <small class="text-muted fw-light"> @Localizer["KudosReceived"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ThumbLike" Filled=false  />

                        <small @ref=_likesSent class="text-muted fw-light"> @UserScoreValue.LikesSent</small>
                        <small class="text-muted fw-light"> @Localizer["LikesSent"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.Heart" Filled=false  />

                        <small @ref=_likesReceived class ="text-muted fw-light"> @UserScoreValue.LikesReceived</small>
                        <small class="text-muted fw-light"> @Localizer["LikesReceived"]</small>
                    </h5>

                     <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.CommentArrowLeft" Filled=false  />

                        <small @ref=_commentsSent class="text-muted fw-light"> @UserScoreValue.MessagesSent</small>
                        <small class="text-muted fw-light"> @Localizer["CommentsSent"]</small>
                    </h5>

                    <h5 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.CommentArrowRight" Filled=false  />

                        <small @ref=_commentsReceived class="text-muted fw-light"> @UserScoreValue.MessagesReceived</small>
                        <small class="text-muted fw-light"> @Localizer["CommentsReceived"]</small>
                    </h5>

                </div>

                @if (UserScoreValue.KudosSent + UserScoreValue.KudosReceived > 0)
                {
                    <div style="clear:both;">
                        <p>@Localizer["Achievements"]</p>

                        

                         @if (UserScoreValue.KudosSent >0)
                        {
                            <img src=@GetKudosSentBadge() style="height:80px;width:80px;padding:5px" />
                        }

                        @if(UserScoreValue.KudosReceived >= 10)
                        {
                            <img src=@GetKudosReceivedBadge() style="height:80px;width:80px;padding:5px" />
                        }

                        @foreach (var badge in UserScoreValue.EarnedBagdes)
                        {
                            <img src=@($"images/badges/{badge}") style="height:80px;width:80px;padding:5px" />
                        }

                       

                        @if (UserScoreValue.EarnedBagdes.Count == 5) // I need to fix it later
                        {
                            <img src="images/badges/all_group.png" style="height:80px;width:80px;padding:5px" />
                        }



                    </div>
                }
            }
            
        </div>

       

        


    </div>

</div>

@code {

    [Parameter]
    public string UserPhoto { get; set; }


    [Parameter]
    public UserInfo User { get; set; }

    [Parameter]
    public UserPointScore UserScoreValue { get; set; }

    
    private bool _isLoaded = false;

    private bool _shouldRender =true;

    private ElementReference _score;
    private ElementReference _kudosSent;
    private ElementReference _kudosReceived;
    private ElementReference _likesSent;
    private ElementReference _likesReceived;
    private ElementReference _commentsSent;
    private ElementReference _commentsReceived;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        UserProfileScoreView.RegisterForLiveUpdates(User.ObjectId );
        UserProfileScoreView.UserScoreCallback = UpdateScoreCallBack;

        UserScoreValue = new();
        UserScoreValue = await UserProfileScoreView.GetUserScore(User.ObjectId);
        _isLoaded = true;

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);

    //    if (firstRender)
    //    {  
    //    }



    //    await UpdateScoreValues();
    //}

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }


    public void UpdateScoreCallBack(UserPointScore userScore)
    {

        if (userScore.UserId.ToString() != User.ObjectId)
            return;

         UserScoreValue = userScore;

        var t = InvokeAsync(() =>
        {
            UpdateScoreValues();

            StateHasChanged();
        });
        t.Wait();
    }

    private void UpdateScoreValues()
    {

        var t = InvokeAsync(() =>
      {
          if (UserScoreValue == null)
              return;

          for (int attempts = 0; attempts < 3; attempts++)
          {

              try
              {

                  JSRuntime.InvokeVoidAsync("updateCount", _score, UserScoreValue.Score);

                  JSRuntime.InvokeVoidAsync("updateCount", _kudosSent, UserScoreValue.KudosSent);
                  JSRuntime.InvokeVoidAsync("updateCount", _kudosReceived, UserScoreValue.KudosReceived);
                  JSRuntime.InvokeVoidAsync("updateCount", _likesSent, UserScoreValue.LikesSent);
                  JSRuntime.InvokeVoidAsync("updateCount", _likesReceived, UserScoreValue.LikesReceived);
                  JSRuntime.InvokeVoidAsync("updateCount", _commentsSent, UserScoreValue.MessagesSent);
                  JSRuntime.InvokeVoidAsync("updateCount", _commentsReceived, UserScoreValue.MessagesReceived);

                  break;
              }
              catch (JSDisconnectedException)
              {
                  StateHasChanged();
              }
          }
      });

        t.Wait();

        
    }

    private string GetKudosSentBadge()
    {
        string result = string.Empty;

        switch (UserScoreValue.KudosSent)
        {
            case var n when (n >= 1 && n <10):
                result = "images/badges/accomplishments/1kudossent.png";
                    break;

            case var n when (n >= 10 && n <= 50):
                result = "images/badges/accomplishments/10kudossent.png";
                break;

            case var n when (n > 50 && n <= 100):
                result = "images/badges/accomplishments/50kudossent.png";
                break;

            case var n when (n > 100):
                result = "images/badges/accomplishments/100kudossent.png";
                break;
        }

        return result;
    }

    private string GetKudosReceivedBadge()
    {
        string result = string.Empty;

        switch (UserScoreValue.KudosReceived)
        {
        
            case var n when (n >= 10 && n <= 50):
                result = "images/badges/accomplishments/10kudosreceived.png";
                break;

            case var n when (n > 50 && n <= 100):
                result = "images/badges/accomplishments/50kudosreceived.png";
                break;

            case var n when (n > 100):
                result = "images/badges/accomplishments/50kudosreceived.png";
                break;
        }

        return result;
    }


   

}
