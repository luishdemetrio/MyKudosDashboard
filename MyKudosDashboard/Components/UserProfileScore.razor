
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;

@inject IUserProfileScoreView UserProfileScoreView;


<div class="card-body">

    <div class="profile">
        <div class="avatar" style="float:none;;align-content:center">
            <img src=@UserPhoto style="height:80px;width:80px;border-radius: 50%" />
        </div>

        <div class="info">
            <h5>@User.DisplayName</h5>

            @if (_isLoaded)
            {
                <h2 class="card-title pricing-card-title">
                    @_userScore.Score
                    <small class="text-muted fw-light"> points</small>
                </h2>

           
                <div style="margin-left:10px">

                    <h4 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ArrowCircleRight" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.KudosSent</small>
                        <small class="text-muted fw-light"> kudos sent</small>
                    </h4>

                    <h4 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ArrowCircleLeft" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.KudosReceived</small>
                        <small class="text-muted fw-light"> kudos received</small>
                    </h4>

                    <h4 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.ThumbLike" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.LikesSent</small>
                        <small class="text-muted fw-light"> likes sent</small>
                    </h4>

                    <h4 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.Heart" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.LikesReceived</small>
                        <small class="text-muted fw-light"> likes received</small>
                    </h4>

                     <h4 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.CommentArrowLeft" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.MessagesSent</small>
                        <small class="text-muted fw-light"> comments sent</small>
                    </h4>

                    <h4 class="card-title pricing-card-title">

                        <FluentIcon Name="@FluentIcons.CommentArrowRight" Color="Color.Neutral" />

                        <small class="text-muted fw-light"> @_userScore.MessagesReceived</small>
                        <small class="text-muted fw-light"> comments received</small>
                    </h4>

                </div>
            }
            
        </div>


        @* <div style="clear:both;">
        <p>Achievements</p>

        <img src="badges/badge01.png" style="height:80px;width:80px;" />
        <img src="badges/badge02.png" style="height:80px;width:80px;"/>
        <img src="badges/badge03.png" style="height:80px;width:80px;" />
        </div>*@


    </div>

</div>

@code {

    [Parameter]
    public string UserPhoto { get; set; }


    [Parameter]
    public UserInfo User { get; set; }

    private UserScore _userScore;

    private bool _isLoaded = false;


    protected override async void OnInitialized()
    {
        base.OnInitialized();

        UserProfileScoreView.RegisterForLiveUpdates(User.ObjectId);
        UserProfileScoreView.UserScoreCallback = UpdateScore;

        _userScore = await UserProfileScoreView.GetUserScore(User.ObjectId);

        if (_userScore == null)
            _userScore = new();

        _isLoaded = true;

        await InvokeAsync(StateHasChanged);
        await Task.Delay(1); // <-- why is this needed to refresh the UI?InvokeAsync(StateHasChanged);
        await Task.CompletedTask;
    }

    public async Task UpdateScore(UserScore userScore)
    {
        if(userScore.UserId == User.ObjectId)
        {
            _userScore = userScore;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1); // <-- why is this needed to refresh the UI?InvokeAsync(StateHasChanged);
        }
        

    }

}
