
@using MyKudos.Gateway.Domain.Models;
@using MyKudosDashboard.Common
@using MyKudosDashboard.Interfaces;
@using MyKudosDashboard.Models;
@using Microsoft.Extensions.Localization
@using System.Globalization


@inject IUserProfileScoreView UserProfileScoreView;
@inject IStringLocalizer<App> Localizer;
@inject IJSRuntime JSRuntime;
@inject NavigationManager Navigator;
@inject KudosCommonVariables CommonVariables;
@inject IImageHelper ImageHelper

@if (CommonVariables.User != null)
{

    <div class="card-body" style="padding:2px">  

        <div class="profile" style="width:100%;height:82vh;overflow-y:scroll;overflow:auto">     

        <div class="avatar" style="float:none;width:100%;text-align: center">

                <img src=@((CommonVariables.User.Photo96x96.Contains("data")) ?
                 CommonVariables.User.Photo96x96 : 
                 $"data:image /png;base64,{CommonVariables.User.Photo96x96}")
                 style="height:8vh;width:8vh;border-radius: 50%;" />            
        </div>

        <div class="info " style="width:100%;margin-bottom: 0px;">

                <h4 style="text-align: center;padding:0px;margin-bottom: 0px">@CommonVariables.User.DisplayName</h4>

            @if (_isLoaded)
            {
                @if (CommonVariables.ShowTopContributors)
                {
                    <div style="width:100%;text-align: center;padding:0px">
                        <h4 class="card-title pricing-card-title" style="margin-bottom: 0px;">
                                <small class="small55"  @ref=_score>@UserScoreValue.Score</small>
                                <small class="text-muted fw-light small55" > @Localizer["Points"]</small>
                        </h4>

                    </div>
                }
           
                <div style="margin-left:10px; display:flex; flex-direction: column;">

                    <div class="card-title pricing-card-title small55" style="margin-bottom: 0px; margin-bottom: 1vh;">
                        
                        @*<FluentEmoji Name="@FluentEmojis.UpRightArrow" Size="@EmojiSize.Size32"  />*@
                        <FluentIcon Name="@FluentIcons.ArrowCircleRight" Filled=false style="width: 4vh; height: 4vh" />

                        <small @ref=_kudosSent class="text-muted fw-light"  > @UserScoreValue.KudosSent</small>
                        <small class="text-muted fw-light" > @Localizer["KudosSent"]</small>
                    </div>

                    <div class="card-title pricing-card-title small55" style="margin-bottom: 1vh;">

                        <FluentIcon Name="@FluentIcons.ArrowCircleLeft" Filled=false style="width: 4vh; height: 4vh" />

                        <small @ref=_kudosReceived class ="text-muted fw-light"> @UserScoreValue.KudosReceived</small>
                        <small class="text-muted fw-light"> @Localizer["KudosReceived"]</small>
                    </div>

                    <div class="card-title pricing-card-title small55" style="margin-bottom: 1vh;">

                        <FluentIcon Name="@FluentIcons.ThumbLike" Filled=false style="width: 4vh; height: 4vh" />

                        <small @ref=_likesSent class="text-muted fw-light"> @UserScoreValue.LikesSent</small>
                        <small class="text-muted fw-light"> @Localizer["LikesSent"]</small>
                    </div>

                    <div class="card-title pricing-card-title small55" style="margin-bottom: 1vh;">

                        <FluentIcon Name="@FluentIcons.Heart" Filled=false style="width: 4vh; height: 4vh" />

                        <small @ref=_likesReceived class ="text-muted fw-light"> @UserScoreValue.LikesReceived</small>
                        <small class="text-muted fw-light"> @Localizer["LikesReceived"]</small>
                    </div>

                    <div class="card-title pricing-card-title small55" style="margin-bottom: 1vh;">

                        <FluentIcon Name="@FluentIcons.CommentArrowRight" Filled=false style="width: 4vh; height: 4vh" />

                        <small @ref=_commentsSent class="text-muted fw-light"> @UserScoreValue.MessagesSent</small>
                        <small class="text-muted fw-light"> @Localizer["CommentsSent"]</small>
                    </div>

                    <div class="card-title pricing-card-title small55" style="margin-bottom: 1vh;">

                        <FluentIcon Name="@FluentIcons.CommentArrowLeft" Filled=false style="width: 4vh; height: 4vh" />

                        <small @ref=_commentsReceived class="text-muted fw-light"> @UserScoreValue.MessagesReceived</small>
                        <small class="text-muted fw-light"> @Localizer["CommentsReceived"]</small>
                    </div>

                </div>

                @if (UserScoreValue.KudosSent + UserScoreValue.KudosReceived > 0)
                {
                    <div style="clear:both;">
                        <p style="font-weight:bold">@Localizer["Achievements"]</p>


                        
                        @foreach (var badge in UserScoreValue.EarnedBagdes)
                        {
                                <img id=@($"badge_{badge.UserBadgeId}") src=@(ImageHelper.GetImageUrl(badge.BadgeName))
                                 style="height:10vh;width:10vh;padding:5px" />

                            <FluentTooltip  Anchor=@($"badge_{badge.UserBadgeId}") 
                                            Position=TooltipPosition.Right>@badge.BadgeDescription</FluentTooltip>
                        }
                    </div>
                }

                @if (ShowSendKudosButton)
                {
                    <button type="button" class="btn btn-primary small55" 
                            style="height:7vh;margin-top:3vh;margin-left:1vh;margin-right:1vh ;width:90%;"
                            @onclick=@(()=>OpenSendKudosPanel() )>
                    📩 @Localizer["SendKudos"]
                    </button>
                }                
            }
            
            </div>

        </div>

    </div>
}

@code {



    [Parameter]
    public UserPointScore UserScoreValue { get; set; }

    [Parameter]
    public SendKudos SendKudosCallBack { get; set; }
    public delegate void SendKudos();

    [Parameter]
    public bool ShowSendKudosButton{ get; set; }


    private bool _isLoaded = false;

    private bool _shouldRender =true;

    private ElementReference _score;
    private ElementReference _kudosSent;
    private ElementReference _kudosReceived;
    private ElementReference _likesSent;
    private ElementReference _likesReceived;
    private ElementReference _commentsSent;
    private ElementReference _commentsReceived;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();


        UserScoreValue = new();

        if (CommonVariables.User != null)
        {
            await GetUserScore();

            UserProfileScoreView.RegisterObserver(CommonVariables.User.UserProfileId.ToString());
        }

        UserProfileScoreView.UserScoreCallback = UpdateScoreCallBack;

        _isLoaded = true;

    }

    public async Task GetUserScore()
    {
        UserScoreValue = await UserProfileScoreView.GetUserScore(CommonVariables.User.UserProfileId.ToString(),
                                                                 CommonVariables.VisualizeJustMyTeam);

        var t = InvokeAsync(() =>
        {
            UpdateScoreValues();

            StateHasChanged();
        });

        t.Wait();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

    }
   
    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    private void OpenSendKudosPanel()
    {
        SendKudosCallBack?.Invoke();
    }

    public void UpdateScoreCallBack(UserPointScore userScore)
    {

        if (userScore.UserId != CommonVariables.User.UserProfileId.ToString())
            return;

         UserScoreValue = userScore;

        var t = InvokeAsync(() =>
        {
            UpdateScoreValues();

            StateHasChanged();
        });
        t.Wait();
    }

    
    private void UpdateScoreValues()
    {

        var t = InvokeAsync(() =>
      {
          if (UserScoreValue == null)
              return;

          for (int attempts = 0; attempts < 3; attempts++)
          {

              try
              {

                  JSRuntime.InvokeVoidAsync("updateCount", _score, UserScoreValue.Score);

                  JSRuntime.InvokeVoidAsync("updateCount", _kudosSent, UserScoreValue.KudosSent);
                  JSRuntime.InvokeVoidAsync("updateCount", _kudosReceived, UserScoreValue.KudosReceived);
                  JSRuntime.InvokeVoidAsync("updateCount", _likesSent, UserScoreValue.LikesSent);
                  JSRuntime.InvokeVoidAsync("updateCount", _likesReceived, UserScoreValue.LikesReceived);
                  JSRuntime.InvokeVoidAsync("updateCount", _commentsSent, UserScoreValue.MessagesSent);
                  JSRuntime.InvokeVoidAsync("updateCount", _commentsReceived, UserScoreValue.MessagesReceived);

                  break;
              }
              catch (JSDisconnectedException)
              {
                  StateHasChanged();
              }
          }
      });

        t.Wait();

        
    }

}
